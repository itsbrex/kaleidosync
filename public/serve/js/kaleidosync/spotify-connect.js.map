{"version":3,"sources":["kaleidosync/spotify-connect.js"],"names":["SpotifyConnect","accessToken","Cookies","get","refreshToken","refreshCode","headers","Authorization","Accept","currentlyPlaying","trackAnalysis","trackProgress","trackFeatures","intervals","types","active","next","last","initial","hooks","forEach","type","onTrackComplete","url","Promise","resolve","reject","request","XMLHttpRequest","open","header","hasOwnProperty","setRequestHeader","onload","status","JSON","parse","responseText","onerror","send","delay","window","performance","now","GetJSON","then","res","catch","err","item","id","reset","progress","timestamp","progress_ms","i","length","updateTrackProgress","index","start","interval","initialize","call","bind","recursionDelay","duration","timeout","setTimeout","executeIntervalHooks","clearTimeout","determineInitialIntervals"],"mappings":"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","file":"spotify-connect.js","sourcesContent":["import Cookies from '../lib/js.cookie'\n\nclass SpotifyConnect {\n  constructor() {\n    this.accessToken = Cookies.get('KALEIDOSYNC_ACCESS_TOKEN')\n    this.refreshToken = Cookies.get('KALEIDOSYNC_REFRESH_TOKEN')\n    this.refreshCode = Cookies.get('KALEIDOSYNC_REFRESH_CODE')\n    this.headers = {\n      Authorization: 'Bearer ' + this.accessToken,\n      Accept: 'application/json'\n    }\n    \n    this.currentlyPlaying = {}\n    this.trackAnalysis = {} \n    this.trackProgress = {}\n    this.trackFeatures = {}\n\n    this.intervals = {\n      types: ['tatums', 'segments', 'beats', 'bars', 'sections'],\n      active: {},\n      next: {}, \n      last: {},\n      initial: {},\n      hooks: {}\n    }\n\n    this.intervals.types.forEach((type) => {\n      this.intervals.active[type] = {}\n      this.intervals.next[type] = {}\n      this.intervals.last[type] = {}\n      this.intervals.initial[type] = {}\n      this.intervals.hooks[type] = () => {}\n    })\n\n    this.onTrackComplete = () => {}\n  }\n\n  GetJSON(url) {\n    return new Promise((resolve, reject) => {\n      let request = new XMLHttpRequest()\n      request.open('GET', url, true)\n      for (var header in this.headers) {\n        if (this.headers.hasOwnProperty(header)) {\n          request.setRequestHeader(header, this.headers[header])\n        }\n      }\n      request.onload = function() {\n        if (request.status !== 200) {\n          reject('ERROR')\n        } else {\n          resolve(JSON.parse(request.responseText))\n        }\n      }\n      request.onerror = () => reject('ERROR')\n      request.send()\n    })\n  }\n\n  getCurrentlyPlaying() {\n    const delay = window.performance.now()\n\n    return new Promise((resolve, reject) => {\n      this.GetJSON('https://api.spotify.com/v1/me/player/currently-playing')\n        .then((res) => resolve({...res, delay: window.performance.now() - delay}))\n        .catch((err) => reject(err))\n    })\n  }\n\n  getTrackFeatures() {\n    return this.GetJSON(`https://api.spotify.com/v1/audio-features/${this.currentlyPlaying.item.id}`)\n  }\n\n  getTrackAnalysis() {\n    return this.GetJSON(`https://api.spotify.com/v1/audio-analysis/${this.currentlyPlaying.item.id}`)\n  }\n\n  updateTrackProgress(delay, reset) {\n    if (reset) {\n      this.trackProgress = {\n        progress: 0,\n        timestamp: 0\n      }\n      return\n    }\n\n    if (delay) {\n      this.trackProgress = {\n        progress: this.currentlyPlaying.progress_ms + delay,\n        timestamp: window.performance.now()\n      }\n    } else {\n      this.trackProgress = {\n        progress: this.trackProgress.progress + (window.performance.now() - this.trackProgress.timestamp),\n        timestamp: window.performance.now()\n      }\n    }\n  }\n\n  determineInitialIntervals(type) {\n    for (let i = 0; i < this.trackAnalysis[type].length; i++) {\n      this.updateTrackProgress()\n\n      /** If last interval... */\n      if (i === (this.trackAnalysis[type].length - 1)) {\n        this.intervals.active[type] = this.trackAnalysis[type][i]\n        this.intervals.initial[type] = this.trackAnalysis[type][i]\n        this.intervals.active[type].index = i\n        this.intervals.initial[type].index = i\n\n        return\n      }\n\n      /** If current track progress falls within current interval. */\n      if (this.trackAnalysis[type][i].start < this.trackProgress.progress/1000 && this.trackProgress.progress/1000 < this.trackAnalysis[type][i + 1].start) {\n        this.intervals.active[type] = this.trackAnalysis[type][i]\n        this.intervals.initial[type] = this.trackAnalysis[type][i]\n        this.intervals.next[type] = this.trackAnalysis[type][i + 1]\n        this.intervals.active[type].index = i\n        this.intervals.initial[type].index = i\n        this.intervals.next[type].index = i + 1\n        break\n      }\n    }\n  }\n\n  executeIntervalHooks(type, interval, index, initialize) {   \n    this.intervals.active[type] = interval\n    this.intervals.next[type] = this.trackAnalysis[type][index + 1] || null\n    this.intervals.last[type] = this.trackAnalysis[type][index - 1] || null\n    this.intervals.active[type].index = index\n    \n    if (typeof this.intervals.hooks[type] === 'function') {\n      this.updateTrackProgress()\n      this.intervals.hooks[type].call()\n      this.updateTrackProgress()\n    }\n\n    if (!this.intervals.next[type]) {\n      if (type === 'tatums') {\n        this.onTrackComplete.bind(this).call()\n      }\n      return\n    }\n    \n    let recursionDelay = 0\n\n    if (initialize === true) {      \n      recursionDelay = (this.intervals.next[type].start * 1000) - this.trackProgress.progress\n    } else {\n      recursionDelay = (interval.duration * 1000) - (this.trackProgress.progress - (interval.start * 1000))\n    }\n\n    if (this.intervals.next[type] !== null) {\n      this.intervals.active[type].timeout = setTimeout(() => {\n        this.executeIntervalHooks(type, this.intervals.next[type], index + 1, false)\n      }, recursionDelay)\n    }\n  }\n\n  removeHooks() {\n    this.intervals.types.forEach((type) => {\n      clearTimeout(this.intervals.active[type].timeout)\n      delete this.intervals.hooks[type]\n    });\n  }\n\n  initializeHooks() {    \n    this.intervals.types.forEach((type) => {\n      this.trackAnalysis[type][0] = {\n        ...this.trackAnalysis[type][0], \n        start: 0,\n        duration: this.trackAnalysis[type][0].start + this.trackAnalysis[type][0].duration\n      }\n\n      this.determineInitialIntervals(type)\n      this.executeIntervalHooks(type, this.intervals.active[type], this.intervals.active[type].index, true)\n    })\n  }\n}\n\nexport default SpotifyConnect"]}
{"version":3,"sources":["kaleidosync/visualizer.js"],"names":["Visualizer","active","initialized","loadingNext","toast","Toast","events","beforeInit","afterInit","beforeStart","afterStart","beforeStop","afterStop","onTrackComplete","stopVisualizer","hideToast","nowPlaying","title","currentlyPlaying","item","name","album","artist","artists","artwork","images","url","call","setIntervalHooks","initializeHooks","bind","removeHooks","updateTrackProgress","response","songsInSync","JSON","stringify","syncError","Math","abs","trackProgress","progress","progress_ms","delay","console","log","parseInt","getData","noToast","syncing","timestamp","window","performance","now","Promise","all","getTrackFeatures","getTrackAnalysis","then","responses","trackFeatures","trackAnalysis","startVisualizer","pingSpotify","is_playing","notPlaying","skipDelay","setTimeout","getCurrentlyPlaying","processResponse","catch","err","SpotifyConnect"],"mappings":"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","file":"visualizer.js","sourcesContent":["import SpotifyConnect from './spotify-connect'\nimport Toast from './toast'\n\nclass Visualizer extends SpotifyConnect {\n  constructor() {\n    super()\n    \n    this.active = false\n    this.initialized = false\n    this.loadingNext = false\n    this.toast = new Toast\n    this.events = {\n      beforeInit: () => {},\n      afterInit: () => {},\n      beforeStart: () => {},\n      afterStart: () => {},\n      beforeStop: () => {},\n      afterStop: () => {}\n    }\n\n    this.onTrackComplete = () => {\n      this.loadingNext = true\n      this.stopVisualizer()\n    }\n  }\n\n  startVisualizer(hideToast) {  \n    if (!hideToast) {\n      this.toast.nowPlaying({\n        title: this.currentlyPlaying.item.name,\n        album: this.currentlyPlaying.item.album.name,\n        artist: this.currentlyPlaying.item.artists[0].name,\n        artwork: this.currentlyPlaying.item.album.images[0].url\n      })\n    }\n\n    if (this.initialized === false) {\n      this.events.beforeInit.call()\n      this.initialized = true\n      this.events.afterInit.call()\n    }\n\n    this.setIntervalHooks()\n    this.events.beforeStart.call()\n    this.events.afterStart.call()\n    this.initializeHooks()\n    this.active = true\n  }\n\n  stopVisualizer() { \n    this.events.beforeStop.bind(this).call()\n    this.removeHooks()\n    this.updateTrackProgress(0, true) \n    this.active = false\n    this.events.afterStop.bind(this).call()\n  }\n\n  processResponse(response) {\n    this.updateTrackProgress()\n\n    const songsInSync = JSON.stringify(this.currentlyPlaying.item) === JSON.stringify(response.item)\n    const syncError = Math.abs(this.trackProgress.progress - (response.progress_ms + response.delay))\n\n    console.log(`Sync error: ${parseInt(syncError) || '0'}ms`)\n\n    const getData = (noToast) => {\n      this.toast.syncing()\n      const timestamp = window.performance.now()\n      this.currentlyPlaying = response\n      Promise.all([\n        this.getTrackFeatures(),\n        this.getTrackAnalysis()\n      ]).then((responses) => {\n        this.loadingNext = false\n        this.stopVisualizer()\n        this.trackFeatures = responses[0]\n        this.trackAnalysis = responses[1]\n        this.updateTrackProgress((response.delay) + (window.performance.now() - timestamp))\n        this.startVisualizer(noToast)\n        this.pingSpotify()\n      })\n    }\n\n    if (this.active && response.is_playing && songsInSync && syncError > 1500) {\n      return getData(true)\n    }\n\n    if (typeof response !== 'object' || !response.is_playing) {\n      if (!this.loadingNext) {\n        this.toast.notPlaying()\n      }\n\n      if (this.active) {\n        this.stopVisualizer()\n      }\n\n      return this.pingSpotify()\n    } \n\n    if (!this.active) {\n      if (songsInSync && this.loadingNext) {\n        return this.pingSpotify()\n      }\n\n      return getData()\n    } else {\n      if (songsInSync) {\n        return this.pingSpotify()\n      }\n      \n      getData()\n    }\n  }\n\n  pingSpotify(skipDelay) {\n    setTimeout(() => {\n      this.getCurrentlyPlaying()\n      .then((response) => this.processResponse(response))\n      .catch((err) => this.processResponse(err))\n    }, skipDelay ? 0 : 1000)    \n  }\n}\n \nexport default Visualizer "]}
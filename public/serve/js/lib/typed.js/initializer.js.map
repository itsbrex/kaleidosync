{"version":3,"sources":["lib/typed.js/initializer.js"],"names":["Initializer","self","options","elementId","el","document","querySelector","defaults","isInput","tagName","toLowerCase","attr","bindInputFocusEvents","showCursor","cursorChar","cursorBlinking","elContent","getAttribute","textContent","contentType","typeSpeed","startDelay","backSpeed","smartBackspace","backDelay","fadeOut","fadeOutClass","fadeOutDelay","isPaused","strings","map","s","trim","stringsElement","style","display","Array","prototype","slice","apply","children","stringsLength","length","i","stringEl","push","innerHTML","strPos","arrayPos","stopNum","loop","loopCount","curLoop","shuffle","sequence","pause","status","typewrite","curString","curStrPos","typingComplete","currentElContent","getCurrentElContent","autoInsertCss","appendAnimationCss","value","cssDataName","css","createElement","type","setAttribute","innerCss","body","appendChild","initializer"],"mappings":"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","file":"initializer.js","sourcesContent":["import defaults from './defaults.js';\n/**\n * Initialize the Typed object\n */\n\nexport default class Initializer {\n  /**\n   * Load up defaults & options on the Typed instance\n   * @param {Typed} self instance of Typed\n   * @param {object} options options object\n   * @param {string} elementId HTML element ID _OR_ instance of HTML element\n   * @private\n   */\n\n  load(self, options, elementId) {\n    // chosen element to manipulate text\n    if (typeof elementId === 'string') {\n      self.el = document.querySelector(elementId);\n    } else {\n      self.el = elementId;\n    }\n\n    self.options = {...defaults, ...options};\n\n    // attribute to type into\n    self.isInput = self.el.tagName.toLowerCase() === 'input';\n    self.attr = self.options.attr;\n    self.bindInputFocusEvents = self.options.bindInputFocusEvents;\n\n    // show cursor\n    self.showCursor = self.isInput ? false : self.options.showCursor;\n\n    // custom cursor\n    self.cursorChar = self.options.cursorChar;\n\n    // Is the cursor blinking\n    self.cursorBlinking = true;\n\n    // text content of element\n    self.elContent = self.attr ? self.el.getAttribute(self.attr) : self.el.textContent;\n\n    // html or plain text\n    self.contentType = self.options.contentType;\n\n    // typing speed\n    self.typeSpeed = self.options.typeSpeed;\n\n    // add a delay before typing starts\n    self.startDelay = self.options.startDelay;\n\n    // backspacing speed\n    self.backSpeed = self.options.backSpeed;\n\n    // only backspace what doesn't match the previous string\n    self.smartBackspace = self.options.smartBackspace;\n\n    // amount of time to wait before backspacing\n    self.backDelay = self.options.backDelay;\n\n    // Fade out instead of backspace\n    self.fadeOut = self.options.fadeOut;\n    self.fadeOutClass = self.options.fadeOutClass;\n    self.fadeOutDelay = self.options.fadeOutDelay;\n\n    // variable to check whether typing is currently paused\n    self.isPaused = false;\n\n    // input strings of text\n    self.strings = self.options.strings.map((s) => s.trim());\n\n    // div containing strings\n    if (typeof self.options.stringsElement === 'string') {\n      self.stringsElement = document.querySelector(self.options.stringsElement);\n    } else {\n      self.stringsElement = self.options.stringsElement;\n    }\n\n    if (self.stringsElement) {\n      self.strings = [];\n      self.stringsElement.style.display = 'none';\n      const strings = Array.prototype.slice.apply(self.stringsElement.children);\n      const stringsLength = strings.length;\n\n      if (stringsLength) {\n        for (let i = 0; i < stringsLength; i += 1) {\n          const stringEl = strings[i];\n          self.strings.push(stringEl.innerHTML.trim());\n        }\n      }\n    }\n\n    // character number position of current string\n    self.strPos = 0;\n\n    // current array position\n    self.arrayPos = 0;\n\n    // index of string to stop backspacing on\n    self.stopNum = 0;\n\n    // Looping logic\n    self.loop = self.options.loop;\n    self.loopCount = self.options.loopCount;\n    self.curLoop = 0;\n\n    // shuffle the strings\n    self.shuffle = self.options.shuffle;\n    // the order of strings\n    self.sequence = [];\n\n    self.pause = {\n      status: false,\n      typewrite: true,\n      curString: '',\n      curStrPos: 0\n    }\n\n    // When the typing is complete (when not looped)\n    self.typingComplete = false;\n\n    // Set the order in which the strings are typed\n    for (let i in self.strings) {\n      self.sequence[i] = i;\n    }\n\n    // If there is some text in the element\n    self.currentElContent = this.getCurrentElContent(self);\n\n    self.autoInsertCss = self.options.autoInsertCss;\n\n    this.appendAnimationCss(self);\n  }\n\n  getCurrentElContent(self) {\n    let elContent = '';\n    if (self.attr) {\n      elContent = self.el.getAttribute(self.attr);\n    } else if (self.isInput) {\n      elContent = self.el.value;\n    } else if (self.contentType === 'html') {\n      elContent = self.el.innerHTML;\n    } else {\n      elContent = self.el.textContent;\n    }\n    return elContent;\n  }\n\n  appendAnimationCss(self) {\n    const cssDataName = 'data-typed-js-css';\n    if (!self.autoInsertCss) { return; }\n    if (!self.showCursor && !self.fadeOut) { return; }\n    if (document.querySelector(`[${cssDataName}]`)) { return; }\n\n    let css = document.createElement('style');\n    css.type = 'text/css';\n    css.setAttribute(cssDataName, true);\n\n    let innerCss = '';\n    if (self.showCursor) {\n      innerCss += `\n        .typed-cursor{\n          opacity: 1;\n        }\n        .typed-cursor.typed-cursor--blink{\n          animation: typedjsBlink 0.7s infinite;\n          -webkit-animation: typedjsBlink 0.7s infinite;\n                  animation: typedjsBlink 0.7s infinite;\n        }\n        @keyframes typedjsBlink{\n          50% { opacity: 0.0; }\n        }\n        @-webkit-keyframes typedjsBlink{\n          0% { opacity: 1; }\n          50% { opacity: 0.0; }\n          100% { opacity: 1; }\n        }\n      `;\n    }\n    if (self.fadeOut) {\n      innerCss += `\n        .typed-fade-out{\n          opacity: 0;\n          transition: opacity .25s;\n        }\n        .typed-cursor.typed-cursor--blink.typed-fade-out{\n          -webkit-animation: 0;\n          animation: 0;\n        }\n      `;\n    }\n    if (css.length === 0) { return; }\n    css.innerHTML = innerCss;\n    document.body.appendChild(css);\n  }\n}\n\nexport let initializer = new Initializer();\n"]}
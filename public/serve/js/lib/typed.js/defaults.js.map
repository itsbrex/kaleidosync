{"version":3,"sources":["lib/typed.js/defaults.js"],"names":["defaults","strings","stringsElement","typeSpeed","startDelay","backSpeed","smartBackspace","shuffle","backDelay","fadeOut","fadeOutClass","fadeOutDelay","loop","loopCount","Infinity","showCursor","cursorChar","autoInsertCss","attr","bindInputFocusEvents","contentType","onComplete","self","preStringTyped","arrayPos","onStringTyped","onLastStringBackspaced","onTypingPaused","onTypingResumed","onReset","onStop","onStart","onDestroy"],"mappings":";;;;;;AAAA;;;;;;AAMA,MAAMA,WAAW;AACf;;;;AAIAC,aAAS,CAAC,iCAAD,EAAoC,8BAApC,EAAoE,eAApE,EAAqF,mBAArF,CALM;AAMfC,oBAAgB,IAND;;AAQf;;;AAGAC,eAAW,CAXI;;AAaf;;;AAGAC,gBAAY,CAhBG;;AAkBf;;;AAGAC,eAAW,CArBI;;AAuBf;;;AAGAC,oBAAgB,IA1BD;;AA4Bf;;;AAGAC,aAAS,KA/BM;;AAiCf;;;AAGAC,eAAW,GApCI;;AAsCf;;;;;AAKAC,aAAS,KA3CM;AA4CfC,kBAAc,gBA5CC;AA6CfC,kBAAc,GA7CC;;AA+Cf;;;;AAIAC,UAAM,KAnDS;AAoDfC,eAAWC,QApDI;;AAsDf;;;;;AAKAC,gBAAY,IA3DG;AA4DfC,gBAAY,GA5DG;AA6DfC,mBAAe,IA7DA;;AA+Df;;;;AAIAC,UAAM,IAnES;;AAqEf;;;AAGAC,0BAAsB,KAxEP;;AA0Ef;;;AAGAC,iBAAa,MA7EE;;AA+Ef;;;;AAIAC,gBAAY,oBAACC,IAAD,EAAU,CAAE,CAnFT;;AAqFf;;;;;AAKAC,oBAAgB,wBAACC,QAAD,EAAWF,IAAX,EAAoB,CAAE,CA1FvB;;AA4Ff;;;;;AAKAG,mBAAe,uBAACD,QAAD,EAAWF,IAAX,EAAoB,CAAE,CAjGtB;;AAmGf;;;;AAIAI,4BAAwB,gCAACJ,IAAD,EAAU,CAAE,CAvGrB;;AAyGf;;;;;AAKAK,oBAAgB,wBAACH,QAAD,EAAWF,IAAX,EAAoB,CAAE,CA9GvB;;AAgHf;;;;;AAKAM,qBAAiB,yBAACJ,QAAD,EAAWF,IAAX,EAAoB,CAAE,CArHxB;;AAuHf;;;;AAIAO,aAAS,iBAACP,IAAD,EAAU,CAAE,CA3HN;;AA6Hf;;;;;AAKAQ,YAAQ,gBAACN,QAAD,EAAWF,IAAX,EAAoB,CAAE,CAlIf;;AAoIf;;;;;AAKAS,aAAS,iBAACP,QAAD,EAAWF,IAAX,EAAoB,CAAE,CAzIhB;;AA2If;;;;AAIAU,eAAW,mBAACV,IAAD,EAAU,CAAE;AA/IR,GAAjB;;oBAkJetB,Q","file":"defaults.js","sourcesContent":["/**\n * Defaults & options\n * @returns {object} Typed defaults & options\n * @public\n */\n\nconst defaults = {\n  /**\n   * @property {array} strings strings to be typed\n   * @property {string} stringsElement ID of element containing string children\n   */\n  strings: ['These are the default values...', 'You know what you should do?', 'Use your own!', 'Have a great day!'],\n  stringsElement: null,\n\n  /**\n   * @property {number} typeSpeed type speed in milliseconds\n   */\n  typeSpeed: 0,\n\n  /**\n   * @property {number} startDelay time before typing starts in milliseconds\n   */\n  startDelay: 0,\n\n  /**\n   * @property {number} backSpeed backspacing speed in milliseconds\n   */\n  backSpeed: 0,\n\n  /**\n   * @property {boolean} smartBackspace only backspace what doesn't match the previous string\n   */\n  smartBackspace: true,\n\n  /**\n   * @property {boolean} shuffle shuffle the strings\n   */\n  shuffle: false,\n\n  /**\n   * @property {number} backDelay time before backspacing in milliseconds\n   */\n  backDelay: 700,\n\n  /**\n   * @property {boolean} fadeOut Fade out instead of backspace\n   * @property {string} fadeOutClass css class for fade animation\n   * @property {boolean} fadeOutDelay Fade out delay in milliseconds\n   */\n  fadeOut: false,\n  fadeOutClass: 'typed-fade-out',\n  fadeOutDelay: 500,\n\n  /**\n   * @property {boolean} loop loop strings\n   * @property {number} loopCount amount of loops\n   */\n  loop: false,\n  loopCount: Infinity,\n\n  /**\n   * @property {boolean} showCursor show cursor\n   * @property {string} cursorChar character for cursor\n   * @property {boolean} autoInsertCss insert CSS for cursor and fadeOut into HTML <head>\n   */\n  showCursor: true,\n  cursorChar: '|',\n  autoInsertCss: true,\n\n  /**\n   * @property {string} attr attribute for typing\n   * Ex: input placeholder, value, or just HTML text\n   */\n  attr: null,\n\n  /**\n   * @property {boolean} bindInputFocusEvents bind to focus and blur if el is text input\n   */\n  bindInputFocusEvents: false,\n\n  /**\n   * @property {string} contentType 'html' or 'null' for plaintext\n   */\n  contentType: 'html',\n\n  /**\n   * All typing is complete\n   * @param {Typed} self\n   */\n  onComplete: (self) => {},\n\n  /**\n   * Before each string is typed\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  preStringTyped: (arrayPos, self) => {},\n\n  /**\n   * After each string is typed\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onStringTyped: (arrayPos, self) => {},\n\n  /**\n   * During looping, after last string is typed\n   * @param {Typed} self\n   */\n  onLastStringBackspaced: (self) => {},\n\n  /**\n   * Typing has been stopped\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onTypingPaused: (arrayPos, self) => {},\n\n  /**\n   * Typing has been started after being stopped\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onTypingResumed: (arrayPos, self) => {},\n\n  /**\n   * After reset\n   * @param {Typed} self\n   */\n  onReset: (self) => {},\n\n  /**\n   * After stop\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onStop: (arrayPos, self) => {},\n\n  /**\n   * After start\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onStart: (arrayPos, self) => {},\n\n  /**\n   * After destroy\n   * @param {Typed} self\n   */\n  onDestroy: (self) => {}\n};\n\nexport default defaults;\n"]}
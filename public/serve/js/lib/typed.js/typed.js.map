{"version":3,"sources":["lib/typed.js/typed.js"],"names":["Typed","elementId","options","initializer","load","begin","pause","status","start","stop","typingComplete","toggleBlinking","onStop","arrayPos","typewrite","curString","curStrPos","backspace","onStart","reset","onDestroy","restart","clearInterval","timeout","replaceText","cursor","parentNode","removeChild","strPos","curLoop","insertCursor","onReset","shuffleStringsIfNeeded","bindInputFocusEvents","bindFocusEvents","setTimeout","currentElContent","length","strings","sequence","startDelay","fadeOut","el","classList","contains","fadeOutClass","remove","humanize","humanizer","typeSpeed","numChars","setPauseStatus","htmlParser","typeHtmlChars","pauseTime","substr","charAt","test","skip","exec","parseInt","temporaryPause","onTypingPaused","substring","stringBeforeSkip","stringSkipped","stringAfterSkip","doneTyping","keepTyping","onTypingResumed","preStringTyped","nextString","onStringTyped","complete","loop","loopCount","backDelay","initFadeOut","backSpeed","backSpaceHtmlChars","curStringAtPosition","smartBackspace","stopNum","onLastStringBackspaced","onComplete","isTyping","isBlinking","cursorBlinking","add","speed","Math","round","random","shuffle","sort","className","fadeOutDelay","str","attr","setAttribute","isInput","value","contentType","innerHTML","textContent","addEventListener","e","showCursor","document","createElement","cursorChar","insertBefore","nextSibling"],"mappings":"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","file":"typed.js","sourcesContent":["import { initializer } from './initializer.js';\nimport { htmlParser } from './html-parser.js';\n\n/**\n * Welcome to Typed.js!\n * @param {string} elementId HTML element ID _OR_ HTML element\n * @param {object} options options object\n * @returns {object} a new Typed object\n */\nexport default class Typed {\n  constructor(elementId, options) {\n    // Initialize it up\n    initializer.load(this, options, elementId);\n    // All systems go!\n    this.begin();\n  }\n\n  /**\n   * Toggle start() and stop() of the Typed instance\n   * @public\n   */\n  toggle() {\n    this.pause.status ? this.start() : this.stop();\n  }\n\n  /**\n   * Stop typing / backspacing and enable cursor blinking\n   * @public\n   */\n  stop() {\n    if (this.typingComplete) return;\n    if (this.pause.status) return;\n    this.toggleBlinking(true);\n    this.pause.status = true;\n    this.options.onStop(this.arrayPos, this);\n  }\n\n  /**\n   * Start typing / backspacing after being stopped\n   * @public\n   */\n  start() {\n    if (this.typingComplete) return;\n    if (!this.pause.status) return;\n    this.pause.status = false;\n    if (this.pause.typewrite) {\n      this.typewrite(this.pause.curString, this.pause.curStrPos);\n    } else {\n      this.backspace(this.pause.curString, this.pause.curStrPos);\n    }\n    this.options.onStart(this.arrayPos, this);\n  }\n\n  /**\n   * Destroy this instance of Typed\n   * @public\n   */\n  destroy() {\n    this.reset(false);\n    this.options.onDestroy(this);\n  }\n\n  /**\n   * Reset Typed and optionally restarts\n   * @param {boolean} restart\n   * @public\n   */\n  reset(restart = true) {\n    clearInterval(this.timeout);\n    this.replaceText('');\n    if (this.cursor && this.cursor.parentNode) {\n      this.cursor.parentNode.removeChild(this.cursor);\n      this.cursor = null;\n    }\n    this.strPos = 0;\n    this.arrayPos = 0;\n    this.curLoop = 0;\n    if (restart) {\n      this.insertCursor();\n      this.options.onReset(this);\n      this.begin();\n    }\n  }\n\n  /**\n   * Begins the typing animation\n   * @private\n   */\n  begin() {\n    this.typingComplete = false;\n    this.shuffleStringsIfNeeded(this);\n    this.insertCursor();\n    if (this.bindInputFocusEvents) this.bindFocusEvents();\n    this.timeout = setTimeout(() => {\n      // Check if there is some text in the element, if yes start by backspacing the default message\n      if (!this.currentElContent || this.currentElContent.length === 0) {\n        this.typewrite(this.strings[this.sequence[this.arrayPos]], this.strPos);\n      } else {\n        // Start typing\n        this.backspace(this.currentElContent, this.currentElContent.length);\n      }\n    }, this.startDelay);\n  }\n\n  /**\n   * Called for each character typed\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  typewrite(curString, curStrPos) {\n    if (this.fadeOut && this.el.classList.contains(this.fadeOutClass)) {\n      this.el.classList.remove(this.fadeOutClass);\n      if (this.cursor) this.cursor.classList.remove(this.fadeOutClass);\n    }\n\n    const humanize = this.humanizer(this.typeSpeed);\n    let numChars = 1;\n\n    if (this.pause.status === true) {\n      this.setPauseStatus(curString, curStrPos, true);\n      return;\n    }\n\n    // contain typing function in a timeout humanize'd delay\n    this.timeout = setTimeout(() => {\n      // skip over any HTML chars\n      curStrPos = htmlParser.typeHtmlChars(curString, curStrPos, this);\n\n      let pauseTime = 0;\n      let substr = curString.substr(curStrPos);\n      // check for an escape character before a pause value\n      // format: \\^\\d+ .. eg: ^1000 .. should be able to print the ^ too using ^^\n      // single ^ are removed from string\n      if (substr.charAt(0) === '^') {\n        if (/^\\^\\d+/.test(substr)) {\n          let skip = 1; // skip at least 1\n          substr = /\\d+/.exec(substr)[0];\n          skip += substr.length;\n          pauseTime = parseInt(substr);\n          this.temporaryPause = true;\n          this.options.onTypingPaused(this.arrayPos, this);\n          // strip out the escape character and pause value so they're not printed\n          curString = curString.substring(0, curStrPos) + curString.substring(curStrPos + skip);\n          this.toggleBlinking(true);\n        }\n      }\n\n      // check for skip characters formatted as\n      // \"this is a `string to print NOW` ...\"\n      if (substr.charAt(0) === '`') {\n        while (curString.substr(curStrPos + numChars).charAt(0) !== '`') {\n          numChars++;\n          if (curStrPos + numChars > curString.length) break;\n        }\n        // strip out the escape characters and append all the string in between\n        const stringBeforeSkip = curString.substring(0, curStrPos);\n        const stringSkipped = curString.substring(stringBeforeSkip.length + 1, curStrPos + numChars);\n        const stringAfterSkip = curString.substring(curStrPos + numChars + 1);\n        curString = stringBeforeSkip + stringSkipped + stringAfterSkip;\n        numChars--;\n      }\n\n      // timeout for any pause after a character\n      this.timeout = setTimeout(() => {\n        // Accounts for blinking while paused\n        this.toggleBlinking(false);\n\n        // We're done with this sentence!\n        if (curStrPos === curString.length) {\n          this.doneTyping(curString, curStrPos);\n        } else {\n          this.keepTyping(curString, curStrPos, numChars);\n        }\n        // end of character pause\n        if (this.temporaryPause) {\n          this.temporaryPause = false;\n          this.options.onTypingResumed(this.arrayPos, this);\n        }\n      }, pauseTime);\n\n      // humanized value for typing\n    }, humanize);\n  }\n\n  /**\n   * Continue to the next string & begin typing\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  keepTyping(curString, curStrPos, numChars) {\n    // call before functions if applicable\n    if (curStrPos === 0) {\n      this.toggleBlinking(false);\n      this.options.preStringTyped(this.arrayPos, this);\n    }\n    // start typing each new char into existing string\n    // curString: arg, this.el.html: original text inside element\n    curStrPos += numChars;\n    const nextString = curString.substr(0, curStrPos);\n    this.replaceText(nextString);\n    // loop the function\n    this.typewrite(curString, curStrPos);\n  }\n\n  /**\n   * We're done typing all strings\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  doneTyping(curString, curStrPos) {\n    // fires callback function\n    this.options.onStringTyped(this.arrayPos, this);\n    this.toggleBlinking(true);\n    // is this the final string\n    if (this.arrayPos === this.strings.length - 1) {\n      // callback that occurs on the last typed string\n      this.complete();\n      // quit if we wont loop back\n      if (this.loop === false || this.curLoop === this.loopCount) {\n        return;\n      }\n    }\n    this.timeout = setTimeout(() => {\n      this.backspace(curString, curStrPos);\n    }, this.backDelay);\n  }\n\n  /**\n   * Backspaces 1 character at a time\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  backspace(curString, curStrPos) {\n    if (this.pause.status === true) {\n      this.setPauseStatus(curString, curStrPos, true);\n      return;\n    }\n    if (this.fadeOut) return this.initFadeOut();\n\n    this.toggleBlinking(false);\n    const humanize = this.humanizer(this.backSpeed);\n\n    this.timeout = setTimeout(() => {\n      curStrPos = htmlParser.backSpaceHtmlChars(curString, curStrPos, this);\n      // replace text with base text + typed characters\n      const curStringAtPosition = curString.substr(0, curStrPos);\n      this.replaceText(curStringAtPosition);\n\n      // if smartBack is enabled\n      if (this.smartBackspace) {\n        // the remaining part of the current string is equal of the same part of the new string\n        let nextString = this.strings[this.arrayPos + 1];\n        if (nextString && curStringAtPosition === nextString.substr(0, curStrPos)) {\n          this.stopNum = curStrPos;\n        } else {\n          this.stopNum = 0;\n        }\n      }\n\n      // if the number (id of character in current string) is\n      // less than the stop number, keep going\n      if (curStrPos > this.stopNum) {\n        // subtract characters one by one\n        curStrPos--;\n        // loop the function\n        this.backspace(curString, curStrPos);\n      } else if (curStrPos <= this.stopNum) {\n        // if the stop number has been reached, increase\n        // array position to next string\n        this.arrayPos++;\n        // When looping, begin at the beginning after backspace complete\n        if (this.arrayPos === this.strings.length) {\n          this.arrayPos = 0;\n          this.options.onLastStringBackspaced();\n          this.shuffleStringsIfNeeded();\n          this.begin();\n        } else {\n          this.typewrite(this.strings[this.sequence[this.arrayPos]], curStrPos);\n        }\n      }\n      // humanized value for typing\n    }, humanize);\n  }\n\n  /**\n   * Full animation is complete\n   * @private\n   */\n  complete() {\n    this.options.onComplete(this);\n    if (this.loop) {\n      this.curLoop++;\n    } else {\n      this.typingComplete = true;\n    }\n  }\n\n  /**\n   * Has the typing been stopped\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @param {boolean} isTyping\n   * @private\n   */\n  setPauseStatus(curString, curStrPos, isTyping) {\n    this.pause.typewrite = isTyping;\n    this.pause.curString = curString;\n    this.pause.curStrPos = curStrPos;\n  }\n\n  /**\n   * Toggle the blinking cursor\n   * @param {boolean} isBlinking\n   * @private\n   */\n  toggleBlinking(isBlinking) {\n    if (!this.cursor) return;\n    // if in paused state, don't toggle blinking a 2nd time\n    if (this.pause.status) return;\n    if (this.cursorBlinking === isBlinking) return;\n    this.cursorBlinking = isBlinking;\n    if (isBlinking) {\n      this.cursor.classList.add('typed-cursor--blink');\n    } else {\n      this.cursor.classList.remove('typed-cursor--blink');\n    }\n  }\n\n  /**\n   * Speed in MS to type\n   * @param {number} speed\n   * @private\n   */\n  humanizer(speed) {\n    return Math.round(Math.random() * speed / 2) + speed;\n  }\n\n  /**\n   * Shuffle the sequence of the strings array\n   * @private\n   */\n  shuffleStringsIfNeeded() {\n    if (!this.shuffle) return;\n    this.sequence = this.sequence.sort(() => Math.random() - 0.5);\n  }\n\n  /**\n   * Adds a CSS class to fade out current string\n   * @private\n   */\n  initFadeOut() {\n    this.el.className += ` ${this.fadeOutClass}`;\n    if (this.cursor) this.cursor.className += ` ${this.fadeOutClass}`;\n    return setTimeout(() => {\n      this.arrayPos++;\n      this.replaceText('');\n\n      // Resets current string if end of loop reached\n      if (this.strings.length > this.arrayPos) {\n        this.typewrite(this.strings[this.sequence[this.arrayPos]], 0);\n      } else {\n        this.typewrite(this.strings[0], 0);\n        this.arrayPos = 0;\n      }\n    }, this.fadeOutDelay);\n  }\n\n  /**\n   * Replaces current text in the HTML element\n   * depending on element type\n   * @param {string} str\n   * @private\n   */\n  replaceText(str) {\n    if (this.attr) {\n      this.el.setAttribute(this.attr, str);\n    } else {\n      if (this.isInput) {\n        this.el.value = str;\n      } else if (this.contentType === 'html') {\n        this.el.innerHTML = str;\n      } else {\n        this.el.textContent = str;\n      }\n    }\n  }\n\n  /**\n   * If using input elements, bind focus in order to\n   * start and stop the animation\n   * @private\n   */\n  bindFocusEvents() {\n    if (!this.isInput) return;\n    this.el.addEventListener('focus', (e) => {\n      this.stop();\n    });\n    this.el.addEventListener('blur', (e) => {\n      if (this.el.value && this.el.value.length !== 0) { return; }\n      this.start();\n    });\n  }\n\n  /**\n   * On init, insert the cursor element\n   * @private\n   */\n  insertCursor() {\n    if (!this.showCursor) return;\n    if (this.cursor) return;\n    this.cursor = document.createElement('span');\n    this.cursor.className = 'typed-cursor';\n    this.cursor.innerHTML = this.cursorChar;\n    this.el.parentNode && this.el.parentNode.insertBefore(this.cursor, this.el.nextSibling);\n  }\n}\n"]}
{"version":3,"file":"OggParser-vMGy0qB6.js","sources":["../../../vue/node_modules/music-metadata/lib/ogg/opus/Opus.js","../../../vue/node_modules/music-metadata/lib/ogg/opus/OpusStream.js","../../../vue/node_modules/music-metadata/lib/ogg/speex/Speex.js","../../../vue/node_modules/music-metadata/lib/ogg/speex/SpeexStream.js","../../../vue/node_modules/music-metadata/lib/ogg/theora/Theora.js","../../../vue/node_modules/music-metadata/lib/ogg/theora/TheoraStream.js","../../../vue/node_modules/music-metadata/lib/ogg/OggToken.js","../../../vue/node_modules/music-metadata/lib/ogg/OggParser.js"],"sourcesContent":["import * as Token from 'token-types';\nimport { makeUnexpectedFileContentError } from '../../ParseError.js';\nexport class OpusContentError extends makeUnexpectedFileContentError('Opus') {\n}\n/**\n * Opus ID Header parser\n * Ref: https://wiki.xiph.org/OggOpus#ID_Header\n */\nexport class IdHeader {\n    constructor(len) {\n        if (len < 19) {\n            throw new OpusContentError('ID-header-page 0 should be at least 19 bytes long');\n        }\n        this.len = len;\n    }\n    get(buf, off) {\n        return {\n            magicSignature: new Token.StringType(8, 'ascii').get(buf, off + 0),\n            version: Token.UINT8.get(buf, off + 8),\n            channelCount: Token.UINT8.get(buf, off + 9),\n            preSkip: Token.UINT16_LE.get(buf, off + 10),\n            inputSampleRate: Token.UINT32_LE.get(buf, off + 12),\n            outputGain: Token.UINT16_LE.get(buf, off + 16),\n            channelMapping: Token.UINT8.get(buf, off + 18)\n        };\n    }\n}\n//# sourceMappingURL=Opus.js.map","import * as Token from 'token-types';\nimport { VorbisStream } from '../vorbis/VorbisStream.js';\nimport * as Opus from './Opus.js';\nimport { OpusContentError } from './Opus.js';\n/**\n * Opus parser\n * Internet Engineering Task Force (IETF) - RFC 6716\n * Used by OggStream\n */\nexport class OpusStream extends VorbisStream {\n    constructor(metadata, options, tokenizer) {\n        super(metadata, options);\n        this.idHeader = null;\n        this.lastPos = -1;\n        this.tokenizer = tokenizer;\n    }\n    /**\n     * Parse first Opus Ogg page\n     * @param {IPageHeader} header\n     * @param {Uint8Array} pageData\n     */\n    parseFirstPage(_header, pageData) {\n        this.metadata.setFormat('codec', 'Opus');\n        // Parse Opus ID Header\n        this.idHeader = new Opus.IdHeader(pageData.length).get(pageData, 0);\n        if (this.idHeader.magicSignature !== \"OpusHead\")\n            throw new OpusContentError(\"Illegal ogg/Opus magic-signature\");\n        this.metadata.setFormat('sampleRate', this.idHeader.inputSampleRate);\n        this.metadata.setFormat('numberOfChannels', this.idHeader.channelCount);\n        this.metadata.setAudioOnly();\n    }\n    async parseFullPage(pageData) {\n        const magicSignature = new Token.StringType(8, 'ascii').get(pageData, 0);\n        switch (magicSignature) {\n            case 'OpusTags':\n                await this.parseUserCommentList(pageData, 8);\n                this.lastPos = this.tokenizer.position - pageData.length;\n                break;\n            default:\n                break;\n        }\n    }\n    calculateDuration() {\n        if (this.lastPageHeader && this.metadata.format.sampleRate && this.lastPageHeader.absoluteGranulePosition >= 0) {\n            // Calculate duration\n            const pos_48bit = this.lastPageHeader.absoluteGranulePosition - this.idHeader.preSkip;\n            this.metadata.setFormat('numberOfSamples', pos_48bit);\n            this.metadata.setFormat('duration', pos_48bit / 48000);\n            if (this.lastPos !== -1 && this.tokenizer.fileInfo.size && this.metadata.format.duration) {\n                const dataSize = this.tokenizer.fileInfo.size - this.lastPos;\n                this.metadata.setFormat('bitrate', 8 * dataSize / this.metadata.format.duration);\n            }\n        }\n    }\n}\n//# sourceMappingURL=OpusStream.js.map","import * as Token from 'token-types';\nimport * as util from '../../common/Util.js';\n/**\n * Speex Header Packet\n * Ref: https://www.speex.org/docs/manual/speex-manual/node8.html#SECTION00830000000000000000\n */\nexport const Header = {\n    len: 80,\n    get: (buf, off) => {\n        return {\n            speex: new Token.StringType(8, 'ascii').get(buf, off + 0),\n            version: util.trimRightNull(new Token.StringType(20, 'ascii').get(buf, off + 8)),\n            version_id: Token.INT32_LE.get(buf, off + 28),\n            header_size: Token.INT32_LE.get(buf, off + 32),\n            rate: Token.INT32_LE.get(buf, off + 36),\n            mode: Token.INT32_LE.get(buf, off + 40),\n            mode_bitstream_version: Token.INT32_LE.get(buf, off + 44),\n            nb_channels: Token.INT32_LE.get(buf, off + 48),\n            bitrate: Token.INT32_LE.get(buf, off + 52),\n            frame_size: Token.INT32_LE.get(buf, off + 56),\n            vbr: Token.INT32_LE.get(buf, off + 60),\n            frames_per_packet: Token.INT32_LE.get(buf, off + 64),\n            extra_headers: Token.INT32_LE.get(buf, off + 68),\n            reserved1: Token.INT32_LE.get(buf, off + 72),\n            reserved2: Token.INT32_LE.get(buf, off + 76)\n        };\n    }\n};\n//# sourceMappingURL=Speex.js.map","import initDebug from 'debug';\nimport { VorbisStream } from '../vorbis/VorbisStream.js';\nimport * as Speex from './Speex.js';\nconst debug = initDebug('music-metadata:parser:ogg:speex');\n/**\n * Speex, RFC 5574\n * Ref:\n * - https://www.speex.org/docs/manual/speex-manual/\n * - https://tools.ietf.org/html/rfc5574\n */\nexport class SpeexStream extends VorbisStream {\n    constructor(metadata, options, tokenizer) {\n        super(metadata, options);\n        this.tokenizer = tokenizer;\n    }\n    /**\n     * Parse first Speex Ogg page\n     * @param {IPageHeader} header\n     * @param {Uint8Array} pageData\n     */\n    parseFirstPage(_header, pageData) {\n        debug('First Ogg/Speex page');\n        const speexHeader = Speex.Header.get(pageData, 0);\n        this.metadata.setFormat('codec', `Speex ${speexHeader.version}`);\n        this.metadata.setFormat('numberOfChannels', speexHeader.nb_channels);\n        this.metadata.setFormat('sampleRate', speexHeader.rate);\n        if (speexHeader.bitrate !== -1) {\n            this.metadata.setFormat('bitrate', speexHeader.bitrate);\n        }\n        this.metadata.setAudioOnly();\n    }\n}\n//# sourceMappingURL=SpeexStream.js.map","import * as Token from 'token-types';\n/**\n * 6.2 Identification Header\n * Ref: https://theora.org/doc/Theora.pdf: 6.2 Identification Header Decode\n */\nexport const IdentificationHeader = {\n    len: 42,\n    get: (buf, off) => {\n        return {\n            id: new Token.StringType(7, 'ascii').get(buf, off),\n            vmaj: Token.UINT8.get(buf, off + 7),\n            vmin: Token.UINT8.get(buf, off + 8),\n            vrev: Token.UINT8.get(buf, off + 9),\n            vmbw: Token.UINT16_BE.get(buf, off + 10),\n            vmbh: Token.UINT16_BE.get(buf, off + 17),\n            nombr: Token.UINT24_BE.get(buf, off + 37),\n            nqual: Token.UINT8.get(buf, off + 40)\n        };\n    }\n};\n//# sourceMappingURL=Theora.js.map","import initDebug from 'debug';\nimport { IdentificationHeader } from './Theora.js';\nconst debug = initDebug('music-metadata:parser:ogg:theora');\n/**\n * Ref:\n * - https://theora.org/doc/Theora.pdf\n */\nexport class TheoraStream {\n    constructor(metadata, _options, tokenizer) {\n        this.metadata = metadata;\n        this.tokenizer = tokenizer;\n    }\n    /**\n     * Vorbis 1 parser\n     * @param header Ogg Page Header\n     * @param pageData Page data\n     */\n    async parsePage(header, pageData) {\n        if (header.headerType.firstPage) {\n            await this.parseFirstPage(header, pageData);\n        }\n    }\n    calculateDuration() {\n        debug('duration calculation not implemented');\n    }\n    /**\n     * Parse first Theora Ogg page. the initial identification header packet\n     */\n    async parseFirstPage(_header, pageData) {\n        debug('First Ogg/Theora page');\n        this.metadata.setFormat('codec', 'Theora');\n        const idHeader = IdentificationHeader.get(pageData, 0);\n        this.metadata.setFormat('bitrate', idHeader.nombr);\n        this.metadata.setFormat('hasVideo', true);\n    }\n    flush() {\n        return Promise.resolve();\n    }\n}\n//# sourceMappingURL=TheoraStream.js.map","import * as Token from 'token-types';\nimport * as util from '../common/Util.js';\nimport { StringType } from 'token-types';\nexport const PageHeader = {\n    len: 27,\n    get: (buf, off) => {\n        return {\n            capturePattern: new StringType(4, 'latin1').get(buf, off),\n            version: Token.UINT8.get(buf, off + 4),\n            headerType: {\n                continued: util.getBit(buf, off + 5, 0),\n                firstPage: util.getBit(buf, off + 5, 1),\n                lastPage: util.getBit(buf, off + 5, 2)\n            },\n            // packet_flag: Token.UINT8.get(buf, off + 5),\n            absoluteGranulePosition: Number(Token.UINT64_LE.get(buf, off + 6)),\n            streamSerialNumber: Token.UINT32_LE.get(buf, off + 14),\n            pageSequenceNo: Token.UINT32_LE.get(buf, off + 18),\n            pageChecksum: Token.UINT32_LE.get(buf, off + 22),\n            page_segments: Token.UINT8.get(buf, off + 26)\n        };\n    }\n};\nexport class SegmentTable {\n    static sum(buf, off, len) {\n        const dv = new DataView(buf.buffer, 0);\n        let s = 0;\n        for (let i = off; i < off + len; ++i) {\n            s += dv.getUint8(i);\n        }\n        return s;\n    }\n    constructor(header) {\n        this.len = header.page_segments;\n    }\n    get(buf, off) {\n        return {\n            totalPageSize: SegmentTable.sum(buf, off, this.len)\n        };\n    }\n}\n//# sourceMappingURL=OggToken.js.map","import * as Token from 'token-types';\nimport { EndOfStreamError } from 'strtok3';\nimport initDebug from 'debug';\nimport { BasicParser } from '../common/BasicParser.js';\nimport { VorbisStream } from './vorbis/VorbisStream.js';\nimport { OpusStream } from './opus/OpusStream.js';\nimport { SpeexStream } from './speex/SpeexStream.js';\nimport { TheoraStream } from './theora/TheoraStream.js';\nimport { makeUnexpectedFileContentError } from '../ParseError.js';\nimport { PageHeader, SegmentTable } from './OggToken.js';\nexport class OggContentError extends makeUnexpectedFileContentError('Ogg') {\n}\nconst debug = initDebug('music-metadata:parser:ogg');\nclass OggStream {\n    constructor(metadata, streamSerial, options) {\n        this.pageNumber = 0;\n        this.closed = false;\n        this.metadata = metadata;\n        this.streamSerial = streamSerial;\n        this.options = options;\n    }\n    async parsePage(tokenizer, header) {\n        this.pageNumber = header.pageSequenceNo;\n        debug('serial=%s page#=%s, Ogg.id=%s', header.streamSerialNumber, header.pageSequenceNo, header.capturePattern);\n        const segmentTable = await tokenizer.readToken(new SegmentTable(header));\n        debug('totalPageSize=%s', segmentTable.totalPageSize);\n        const pageData = await tokenizer.readToken(new Token.Uint8ArrayType(segmentTable.totalPageSize));\n        debug('firstPage=%s, lastPage=%s, continued=%s', header.headerType.firstPage, header.headerType.lastPage, header.headerType.continued);\n        if (header.headerType.firstPage) {\n            const idData = pageData.slice(0, 7); // Copy this portion\n            switch (idData[0]) {\n                case 0x01:\n                case 0x80:\n                    idData[0] = 0x5F; // underscore\n                    break;\n            }\n            const id = new TextDecoder('latin1').decode(idData);\n            switch (id) {\n                case '_vorbis': // Ogg/Vorbis\n                    debug(`Set Ogg stream serial ${header.streamSerialNumber}, codec=Vorbis`);\n                    this.pageConsumer = new VorbisStream(this.metadata, this.options);\n                    break;\n                case 'OpusHea': // Ogg/Opus\n                    debug('Set page consumer to Ogg/Opus');\n                    this.pageConsumer = new OpusStream(this.metadata, this.options, tokenizer);\n                    break;\n                case 'Speex  ': // Ogg/Speex\n                    debug('Set page consumer to Ogg/Speex');\n                    this.pageConsumer = new SpeexStream(this.metadata, this.options, tokenizer);\n                    break;\n                case 'fishead':\n                case '_theora': // Ogg/Theora\n                    debug('Set page consumer to Ogg/Theora');\n                    this.pageConsumer = new TheoraStream(this.metadata, this.options, tokenizer);\n                    break;\n                default:\n                    throw new OggContentError(`Ogg codec not recognized (id=${id})`);\n            }\n        }\n        if (header.headerType.lastPage) {\n            this.closed = true;\n        }\n        if (this.pageConsumer) {\n            await this.pageConsumer.parsePage(header, pageData);\n        }\n        else\n            throw new Error('pageConsumer should be initialized');\n    }\n}\n/**\n * Parser for Ogg logical bitstream framing\n */\nexport class OggParser extends BasicParser {\n    constructor() {\n        super(...arguments);\n        this.streams = new Map();\n    }\n    /**\n     * Parse page\n     * @returns {Promise<void>}\n     */\n    async parse() {\n        this.streams = new Map();\n        debug('pos=%s, parsePage()', this.tokenizer.position);\n        let header;\n        try {\n            do {\n                header = await this.tokenizer.readToken(PageHeader);\n                if (header.capturePattern !== 'OggS')\n                    throw new OggContentError('Invalid Ogg capture pattern');\n                this.metadata.setFormat('container', 'Ogg');\n                let stream = this.streams.get(header.streamSerialNumber);\n                if (!stream) {\n                    stream = new OggStream(this.metadata, header.streamSerialNumber, this.options);\n                    this.streams.set(header.streamSerialNumber, stream);\n                }\n                await stream.parsePage(this.tokenizer, header);\n            } while (![...this.streams.values()].every(item => item.closed));\n        }\n        catch (err) {\n            if (err instanceof EndOfStreamError) {\n                debug(\"Reached end-of-stream\");\n            }\n            else if (err instanceof OggContentError) {\n                this.metadata.addWarning(`Corrupt Ogg content at ${this.tokenizer.position}`);\n            }\n            else\n                throw err;\n        }\n        for (const stream of this.streams.values()) {\n            if (!stream.closed) {\n                this.metadata.addWarning(`End-of-stream reached before reaching last page in Ogg stream serial=${stream.streamSerial}`);\n                await stream.pageConsumer?.flush();\n            }\n            stream.pageConsumer?.calculateDuration();\n        }\n    }\n}\n//# sourceMappingURL=OggParser.js.map"],"names":["OpusContentError","makeUnexpectedFileContentError","IdHeader","len","buf","off","Token.StringType","Token.UINT8","Token.UINT16_LE","Token.UINT32_LE","OpusStream","VorbisStream","metadata","options","tokenizer","_header","pageData","Opus.IdHeader","pos_48bit","dataSize","Header","util.trimRightNull","Token.INT32_LE","debug","initDebug","SpeexStream","speexHeader","Speex.Header","IdentificationHeader","Token.UINT16_BE","Token.UINT24_BE","TheoraStream","_options","header","idHeader","PageHeader","StringType","util.getBit","Token.UINT64_LE","SegmentTable","dv","s","i","OggContentError","OggStream","streamSerial","segmentTable","Token.Uint8ArrayType","idData","id","OggParser","BasicParser","stream","item","err","EndOfStreamError"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7]}
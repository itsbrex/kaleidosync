import{b as n,w as S,r as d,S as m,m as T,D as r,V as v,t as p,p as F,a as P,l as h,v as k,B as x,E as y,c as N}from"./useAudioMetadata-Dr-ZpCn7.js";import{V as u}from"./VorbisStream-BQnc4-mp.js";import"./index-DmvewjL6.js";import"./browser-CE8oubu2.js";class _ extends T("Opus"){}class C{constructor(e){if(e<19)throw new _("ID-header-page 0 should be at least 19 bytes long");this.len=e}get(e,t){return{magicSignature:new m(8,"ascii").get(e,t+0),version:n.get(e,t+8),channelCount:n.get(e,t+9),preSkip:S.get(e,t+10),inputSampleRate:d.get(e,t+12),outputGain:S.get(e,t+16),channelMapping:n.get(e,t+18)}}}class z extends u{constructor(e,t,s){super(e,t),this.idHeader=null,this.lastPos=-1,this.tokenizer=s}parseFirstPage(e,t){if(this.metadata.setFormat("codec","Opus"),this.idHeader=new C(t.length).get(t,0),this.idHeader.magicSignature!=="OpusHead")throw new _("Illegal ogg/Opus magic-signature");this.metadata.setFormat("sampleRate",this.idHeader.inputSampleRate),this.metadata.setFormat("numberOfChannels",this.idHeader.channelCount),this.metadata.setAudioOnly()}async parseFullPage(e){switch(new m(8,"ascii").get(e,0)){case"OpusTags":await this.parseUserCommentList(e,8),this.lastPos=this.tokenizer.position-e.length;break}}calculateDuration(){if(this.lastPageHeader&&this.metadata.format.sampleRate&&this.lastPageHeader.absoluteGranulePosition>=0){const e=this.lastPageHeader.absoluteGranulePosition-this.idHeader.preSkip;if(this.metadata.setFormat("numberOfSamples",e),this.metadata.setFormat("duration",e/48e3),this.lastPos!==-1&&this.tokenizer.fileInfo.size&&this.metadata.format.duration){const t=this.tokenizer.fileInfo.size-this.lastPos;this.metadata.setFormat("bitrate",8*t/this.metadata.format.duration)}}}}const H={len:80,get:(a,e)=>({speex:new m(8,"ascii").get(a,e+0),version:v(new m(20,"ascii").get(a,e+8)),version_id:r.get(a,e+28),header_size:r.get(a,e+32),rate:r.get(a,e+36),mode:r.get(a,e+40),mode_bitstream_version:r.get(a,e+44),nb_channels:r.get(a,e+48),bitrate:r.get(a,e+52),frame_size:r.get(a,e+56),vbr:r.get(a,e+60),frames_per_packet:r.get(a,e+64),extra_headers:r.get(a,e+68),reserved1:r.get(a,e+72),reserved2:r.get(a,e+76)})},E=p("music-metadata:parser:ogg:speex");class I extends u{constructor(e,t,s){super(e,t),this.tokenizer=s}parseFirstPage(e,t){E("First Ogg/Speex page");const s=H.get(t,0);this.metadata.setFormat("codec",`Speex ${s.version}`),this.metadata.setFormat("numberOfChannels",s.nb_channels),this.metadata.setFormat("sampleRate",s.rate),s.bitrate!==-1&&this.metadata.setFormat("bitrate",s.bitrate),this.metadata.setAudioOnly()}}const b={len:42,get:(a,e)=>({id:new m(7,"ascii").get(a,e),vmaj:n.get(a,e+7),vmin:n.get(a,e+8),vrev:n.get(a,e+9),vmbw:P.get(a,e+10),vmbh:P.get(a,e+17),nombr:F.get(a,e+37),nqual:n.get(a,e+40)})},O=p("music-metadata:parser:ogg:theora");class U{constructor(e,t,s){this.metadata=e,this.tokenizer=s}async parsePage(e,t){e.headerType.firstPage&&await this.parseFirstPage(e,t)}calculateDuration(){O("duration calculation not implemented")}async parseFirstPage(e,t){O("First Ogg/Theora page"),this.metadata.setFormat("codec","Theora");const s=b.get(t,0);this.metadata.setFormat("bitrate",s.nombr),this.metadata.setFormat("hasVideo",!0)}flush(){return Promise.resolve()}}const R={len:27,get:(a,e)=>({capturePattern:new m(4,"latin1").get(a,e),version:n.get(a,e+4),headerType:{continued:h(a,e+5,0),firstPage:h(a,e+5,1),lastPage:h(a,e+5,2)},absoluteGranulePosition:Number(k.get(a,e+6)),streamSerialNumber:d.get(a,e+14),pageSequenceNo:d.get(a,e+18),pageChecksum:d.get(a,e+22),page_segments:n.get(a,e+26)})};class w{static sum(e,t,s){const c=new DataView(e.buffer,0);let o=0;for(let g=t;g<t+s;++g)o+=c.getUint8(g);return o}constructor(e){this.len=e.page_segments}get(e,t){return{totalPageSize:w.sum(e,t,this.len)}}}class l extends T("Ogg"){}const i=p("music-metadata:parser:ogg");class ${constructor(e,t,s){this.pageNumber=0,this.closed=!1,this.metadata=e,this.streamSerial=t,this.options=s}async parsePage(e,t){this.pageNumber=t.pageSequenceNo,i("serial=%s page#=%s, Ogg.id=%s",t.streamSerialNumber,t.pageSequenceNo,t.capturePattern);const s=await e.readToken(new w(t));i("totalPageSize=%s",s.totalPageSize);const c=await e.readToken(new N(s.totalPageSize));if(i("firstPage=%s, lastPage=%s, continued=%s",t.headerType.firstPage,t.headerType.lastPage,t.headerType.continued),t.headerType.firstPage){const o=c.slice(0,7);switch(o[0]){case 1:case 128:o[0]=95;break}const g=new TextDecoder("latin1").decode(o);switch(g){case"_vorbis":i(`Set Ogg stream serial ${t.streamSerialNumber}, codec=Vorbis`),this.pageConsumer=new u(this.metadata,this.options);break;case"OpusHea":i("Set page consumer to Ogg/Opus"),this.pageConsumer=new z(this.metadata,this.options,e);break;case"Speex  ":i("Set page consumer to Ogg/Speex"),this.pageConsumer=new I(this.metadata,this.options,e);break;case"fishead":case"_theora":i("Set page consumer to Ogg/Theora"),this.pageConsumer=new U(this.metadata,this.options,e);break;default:throw new l(`Ogg codec not recognized (id=${g})`)}}if(t.headerType.lastPage&&(this.closed=!0),this.pageConsumer)await this.pageConsumer.parsePage(t,c);else throw new Error("pageConsumer should be initialized")}}class q extends x{constructor(){super(...arguments),this.streams=new Map}async parse(){this.streams=new Map,i("pos=%s, parsePage()",this.tokenizer.position);let e;try{do{if(e=await this.tokenizer.readToken(R),e.capturePattern!=="OggS")throw new l("Invalid Ogg capture pattern");this.metadata.setFormat("container","Ogg");let t=this.streams.get(e.streamSerialNumber);t||(t=new $(this.metadata,e.streamSerialNumber,this.options),this.streams.set(e.streamSerialNumber,t)),await t.parsePage(this.tokenizer,e)}while(![...this.streams.values()].every(t=>t.closed))}catch(t){if(t instanceof y)i("Reached end-of-stream");else if(t instanceof l)this.metadata.addWarning(`Corrupt Ogg content at ${this.tokenizer.position}`);else throw t}for(const t of this.streams.values())t.closed||(this.metadata.addWarning(`End-of-stream reached before reaching last page in Ogg stream serial=${t.streamSerial}`),await t.pageConsumer?.flush()),t.pageConsumer?.calculateDuration()}}export{l as OggContentError,q as OggParser};
//# sourceMappingURL=OggParser-BOeP9XL3.js.map

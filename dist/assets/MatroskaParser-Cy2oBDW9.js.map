{"version":3,"file":"MatroskaParser-Cy2oBDW9.js","sources":["../../node_modules/music-metadata/lib/ebml/types.js","../../node_modules/music-metadata/lib/matroska/MatroskaDtd.js","../../node_modules/music-metadata/lib/ebml/EbmlIterator.js","../../node_modules/music-metadata/lib/matroska/MatroskaParser.js"],"sourcesContent":["export const DataType = {\n    string: 0,\n    uint: 1,\n    uid: 2,\n    bool: 3,\n    binary: 4,\n    float: 5,\n};\n//# sourceMappingURL=types.js.map","import { DataType } from '../ebml/types.js';\n/**\n * Elements of document type description\n * Derived from https://github.com/tungol/EBML/blob/master/doctypes/matroska.dtd\n * Extended with:\n * - https://www.matroska.org/technical/specs/index.html\n */\nexport const matroskaDtd = {\n    name: 'dtd',\n    container: {\n        0x1a45dfa3: {\n            name: 'ebml',\n            container: {\n                0x4286: { name: 'ebmlVersion', value: DataType.uint }, // 5.1.1\n                0x42f7: { name: 'ebmlReadVersion', value: DataType.uint }, // 5.1.2\n                0x42f2: { name: 'ebmlMaxIDWidth', value: DataType.uint }, // 5.1.3\n                0x42f3: { name: 'ebmlMaxSizeWidth', value: DataType.uint }, // 5.1.4\n                0x4282: { name: 'docType', value: DataType.string }, // 5.1.5\n                0x4287: { name: 'docTypeVersion', value: DataType.uint }, // 5.1.6\n                0x4285: { name: 'docTypeReadVersion', value: DataType.uint } // 5.1.7\n            }\n        },\n        // Matroska segments\n        0x18538067: {\n            name: 'segment',\n            container: {\n                // Meta Seek Information (also known as MetaSeek)\n                0x114d9b74: {\n                    name: 'seekHead',\n                    container: {\n                        0x4dbb: {\n                            name: 'seek',\n                            multiple: true,\n                            container: {\n                                0x53ab: { name: 'id', value: DataType.binary },\n                                0x53ac: { name: 'position', value: DataType.uint }\n                            }\n                        }\n                    }\n                },\n                // Segment Information\n                0x1549a966: {\n                    name: 'info',\n                    container: {\n                        0x73a4: { name: 'uid', value: DataType.uid },\n                        0x7384: { name: 'filename', value: DataType.string },\n                        0x3cb923: { name: 'prevUID', value: DataType.uid },\n                        0x3c83ab: { name: 'prevFilename', value: DataType.string },\n                        0x3eb923: { name: 'nextUID', value: DataType.uid },\n                        0x3e83bb: { name: 'nextFilename', value: DataType.string },\n                        0x2ad7b1: { name: 'timecodeScale', value: DataType.uint },\n                        0x4489: { name: 'duration', value: DataType.float },\n                        0x4461: { name: 'dateUTC', value: DataType.uint },\n                        0x7ba9: { name: 'title', value: DataType.string },\n                        0x4d80: { name: 'muxingApp', value: DataType.string },\n                        0x5741: { name: 'writingApp', value: DataType.string }\n                    }\n                },\n                // Cluster\n                0x1f43b675: {\n                    name: 'cluster',\n                    multiple: true,\n                    container: {\n                        0xe7: { name: 'timecode', value: DataType.uid },\n                        0x58d7: { name: 'silentTracks ', multiple: true },\n                        0xa7: { name: 'position', value: DataType.uid },\n                        0xab: { name: 'prevSize', value: DataType.uid },\n                        0xa0: { name: 'blockGroup' },\n                        0xa3: { name: 'simpleBlock' }\n                    }\n                },\n                // Track\n                0x1654ae6b: {\n                    name: 'tracks',\n                    container: {\n                        0xae: {\n                            name: 'entries',\n                            multiple: true,\n                            container: {\n                                0xd7: { name: 'trackNumber', value: DataType.uint },\n                                0x73c5: { name: 'uid', value: DataType.uid },\n                                0x83: { name: 'trackType', value: DataType.uint },\n                                0xb9: { name: 'flagEnabled', value: DataType.bool },\n                                0x88: { name: 'flagDefault', value: DataType.bool },\n                                0x55aa: { name: 'flagForced', value: DataType.bool }, // extended\n                                0x9c: { name: 'flagLacing', value: DataType.bool },\n                                0x6de7: { name: 'minCache', value: DataType.uint },\n                                0x6de8: { name: 'maxCache', value: DataType.uint },\n                                0x23e383: { name: 'defaultDuration', value: DataType.uint },\n                                0x23314f: { name: 'timecodeScale', value: DataType.float },\n                                0x536e: { name: 'name', value: DataType.string },\n                                0x22b59c: { name: 'language', value: DataType.string },\n                                0x86: { name: 'codecID', value: DataType.string },\n                                0x63a2: { name: 'codecPrivate', value: DataType.binary },\n                                0x258688: { name: 'codecName', value: DataType.string },\n                                0x3a9697: { name: 'codecSettings', value: DataType.string },\n                                0x3b4040: { name: 'codecInfoUrl', value: DataType.string },\n                                0x26b240: { name: 'codecDownloadUrl', value: DataType.string },\n                                0xaa: { name: 'codecDecodeAll', value: DataType.bool },\n                                0x6fab: { name: 'trackOverlay', value: DataType.uint },\n                                // Video\n                                0xe0: {\n                                    name: 'video',\n                                    container: {\n                                        0x9a: { name: 'flagInterlaced', value: DataType.bool },\n                                        0x53b8: { name: 'stereoMode', value: DataType.uint },\n                                        0xb0: { name: 'pixelWidth', value: DataType.uint },\n                                        0xba: { name: 'pixelHeight', value: DataType.uint },\n                                        0x54b0: { name: 'displayWidth', value: DataType.uint },\n                                        0x54ba: { name: 'displayHeight', value: DataType.uint },\n                                        0x54b3: { name: 'aspectRatioType', value: DataType.uint },\n                                        0x2eb524: { name: 'colourSpace', value: DataType.uint },\n                                        0x2fb523: { name: 'gammaValue', value: DataType.float }\n                                    }\n                                },\n                                // Audio\n                                0xe1: {\n                                    name: 'audio',\n                                    container: {\n                                        0xb5: { name: 'samplingFrequency', value: DataType.float },\n                                        0x78b5: { name: 'outputSamplingFrequency', value: DataType.float },\n                                        0x9f: { name: 'channels', value: DataType.uint }, // https://www.matroska.org/technical/specs/index.html\n                                        0x94: { name: 'channels', value: DataType.uint },\n                                        0x7d7b: { name: 'channelPositions', value: DataType.binary },\n                                        0x6264: { name: 'bitDepth', value: DataType.uint }\n                                    }\n                                },\n                                // Content Encoding\n                                0x6d80: {\n                                    name: 'contentEncodings',\n                                    container: {\n                                        0x6240: {\n                                            name: 'contentEncoding',\n                                            container: {\n                                                0x5031: { name: 'order', value: DataType.uint },\n                                                0x5032: { name: 'scope', value: DataType.bool },\n                                                0x5033: { name: 'type', value: DataType.uint },\n                                                0x5034: {\n                                                    name: 'contentEncoding',\n                                                    container: {\n                                                        0x4254: { name: 'contentCompAlgo', value: DataType.uint },\n                                                        0x4255: { name: 'contentCompSettings', value: DataType.binary }\n                                                    }\n                                                },\n                                                0x5035: {\n                                                    name: 'contentEncoding',\n                                                    container: {\n                                                        0x47e1: { name: 'contentEncAlgo', value: DataType.uint },\n                                                        0x47e2: { name: 'contentEncKeyID', value: DataType.binary },\n                                                        0x47e3: { name: 'contentSignature ', value: DataType.binary },\n                                                        0x47e4: { name: 'ContentSigKeyID  ', value: DataType.binary },\n                                                        0x47e5: { name: 'contentSigAlgo ', value: DataType.uint },\n                                                        0x47e6: { name: 'contentSigHashAlgo ', value: DataType.uint }\n                                                    }\n                                                },\n                                                0x6264: { name: 'bitDepth', value: DataType.uint }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                // Cueing Data\n                0x1c53bb6b: {\n                    name: 'cues',\n                    container: {\n                        0xbb: {\n                            name: 'cuePoint',\n                            container: {\n                                0xb3: { name: 'cueTime', value: DataType.uid },\n                                0xb7: {\n                                    name: 'positions',\n                                    container: {\n                                        0xf7: { name: 'track', value: DataType.uint },\n                                        0xf1: { name: 'clusterPosition', value: DataType.uint },\n                                        0x5378: { name: 'blockNumber', value: DataType.uint },\n                                        0xea: { name: 'codecState', value: DataType.uint },\n                                        0xdb: {\n                                            name: 'reference', container: {\n                                                0x96: { name: 'time', value: DataType.uint },\n                                                0x97: { name: 'cluster', value: DataType.uint },\n                                                0x535f: { name: 'number', value: DataType.uint },\n                                                0xeb: { name: 'codecState', value: DataType.uint }\n                                            }\n                                        },\n                                        0xf0: { name: 'relativePosition', value: DataType.uint } // extended\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                // Attachment\n                0x1941a469: {\n                    name: 'attachments',\n                    container: {\n                        0x61a7: {\n                            name: 'attachedFiles',\n                            multiple: true,\n                            container: {\n                                0x467e: { name: 'description', value: DataType.string },\n                                0x466e: { name: 'name', value: DataType.string },\n                                0x4660: { name: 'mimeType', value: DataType.string },\n                                0x465c: { name: 'data', value: DataType.binary },\n                                0x46ae: { name: 'uid', value: DataType.uid }\n                            }\n                        }\n                    }\n                },\n                // Chapters\n                0x1043a770: {\n                    name: 'chapters',\n                    container: {\n                        0x45b9: {\n                            name: 'editionEntry',\n                            container: {\n                                0xb6: {\n                                    name: 'chapterAtom',\n                                    container: {\n                                        0x73c4: { name: 'uid', value: DataType.uid },\n                                        0x91: { name: 'timeStart', value: DataType.uint },\n                                        0x92: { name: 'timeEnd', value: DataType.uid },\n                                        0x98: { name: 'hidden', value: DataType.bool },\n                                        0x4598: { name: 'enabled', value: DataType.uid },\n                                        0x8f: {\n                                            name: 'track', container: {\n                                                0x89: { name: 'trackNumber', value: DataType.uid },\n                                                0x80: {\n                                                    name: 'display', container: {\n                                                        0x85: { name: 'string', value: DataType.string },\n                                                        0x437c: { name: 'language ', value: DataType.string },\n                                                        0x437e: { name: 'country ', value: DataType.string }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                // Tagging\n                0x1254c367: {\n                    name: 'tags',\n                    container: {\n                        0x7373: {\n                            name: 'tag',\n                            multiple: true,\n                            container: {\n                                0x63c0: {\n                                    name: 'target',\n                                    container: {\n                                        0x63c5: { name: 'tagTrackUID', value: DataType.uid },\n                                        0x63c4: { name: 'tagChapterUID', value: DataType.uint },\n                                        0x63c6: { name: 'tagAttachmentUID', value: DataType.uid },\n                                        0x63ca: { name: 'targetType', value: DataType.string }, // extended\n                                        0x68ca: { name: 'targetTypeValue', value: DataType.uint }, // extended\n                                        0x63c9: { name: 'tagEditionUID', value: DataType.uid } // extended\n                                    }\n                                },\n                                0x67c8: {\n                                    name: 'simpleTags',\n                                    multiple: true,\n                                    container: {\n                                        0x45a3: { name: 'name', value: DataType.string },\n                                        0x4487: { name: 'string', value: DataType.string },\n                                        0x4485: { name: 'binary', value: DataType.binary },\n                                        0x447a: { name: 'language', value: DataType.string }, // extended\n                                        0x447b: { name: 'languageIETF', value: DataType.string }, // extended\n                                        0x4484: { name: 'default', value: DataType.bool } // extended\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n};\n//# sourceMappingURL=MatroskaDtd.js.map","import { Float32_BE, Float64_BE, StringType, UINT8 } from 'token-types';\nimport initDebug from 'debug';\nimport { EndOfStreamError } from 'strtok3';\nimport { DataType } from './types.js';\nimport * as Token from 'token-types';\nimport { makeUnexpectedFileContentError } from '../ParseError.js';\nconst debug = initDebug('music-metadata:parser:ebml');\nexport class EbmlContentError extends makeUnexpectedFileContentError('EBML') {\n}\nexport const ParseAction = {\n    ReadNext: 0, // Continue reading the next elements\n    IgnoreElement: 2, // Ignore (do not read) this element\n    SkipSiblings: 3, // Skip all remaining elements at the same level\n    TerminateParsing: 4, // Terminate the parsing process\n    SkipElement: 5 // Consider the element has read, assume position is at the next element\n};\n/**\n * Extensible Binary Meta Language (EBML) iterator\n * https://en.wikipedia.org/wiki/Extensible_Binary_Meta_Language\n * http://matroska.sourceforge.net/technical/specs/rfc/index.html\n *\n * WEBM VP8 AUDIO FILE\n */\nexport class EbmlIterator {\n    /**\n     * @param {ITokenizer} tokenizer Input\n     * @param tokenizer\n     */\n    constructor(tokenizer) {\n        this.padding = 0;\n        this.parserMap = new Map();\n        this.ebmlMaxIDLength = 4;\n        this.ebmlMaxSizeLength = 8;\n        this.tokenizer = tokenizer;\n        this.parserMap.set(DataType.uint, e => this.readUint(e));\n        this.parserMap.set(DataType.string, e => this.readString(e));\n        this.parserMap.set(DataType.binary, e => this.readBuffer(e));\n        this.parserMap.set(DataType.uid, async (e) => this.readBuffer(e));\n        this.parserMap.set(DataType.bool, e => this.readFlag(e));\n        this.parserMap.set(DataType.float, e => this.readFloat(e));\n    }\n    async iterate(dtdElement, posDone, listener) {\n        return this.parseContainer(linkParents(dtdElement), posDone, listener);\n    }\n    async parseContainer(dtdElement, posDone, listener) {\n        const tree = {};\n        while (this.tokenizer.position < posDone) {\n            let element;\n            const elementPosition = this.tokenizer.position;\n            try {\n                element = await this.readElement();\n            }\n            catch (error) {\n                if (error instanceof EndOfStreamError) {\n                    break;\n                }\n                throw error;\n            }\n            const child = dtdElement.container[element.id];\n            if (child) {\n                const action = listener.startNext(child);\n                switch (action) {\n                    case ParseAction.ReadNext:\n                        {\n                            if (element.id === 0x1F43B675) {\n                                // Hack to ignore remaining segment, when cluster element received\n                                // await this.tokenizer.ignore(posDone - this.tokenizer.position);\n                                // break;\n                            }\n                            debug(`Read element: name=${getElementPath(child)}{id=0x${element.id.toString(16)}, container=${!!child.container}} at position=${elementPosition}`);\n                            if (child.container) {\n                                const res = await this.parseContainer(child, element.len >= 0 ? this.tokenizer.position + element.len : -1, listener);\n                                if (child.multiple) {\n                                    if (!tree[child.name]) {\n                                        tree[child.name] = [];\n                                    }\n                                    tree[child.name].push(res);\n                                }\n                                else {\n                                    tree[child.name] = res;\n                                }\n                                await listener.elementValue(child, res, elementPosition);\n                            }\n                            else {\n                                const parser = this.parserMap.get(child.value);\n                                if (typeof parser === 'function') {\n                                    const value = await parser(element);\n                                    tree[child.name] = value;\n                                    await listener.elementValue(child, value, elementPosition);\n                                }\n                            }\n                        }\n                        break;\n                    case ParseAction.SkipElement:\n                        debug(`Go to next element: name=${getElementPath(child)}, element.id=0x${element.id}, container=${!!child.container} at position=${elementPosition}`);\n                        break;\n                    case ParseAction.IgnoreElement:\n                        debug(`Ignore element: name=${getElementPath(child)}, element.id=0x${element.id}, container=${!!child.container} at position=${elementPosition}`);\n                        await this.tokenizer.ignore(element.len);\n                        break;\n                    case ParseAction.SkipSiblings:\n                        debug(`Ignore remaining container, at: name=${getElementPath(child)}, element.id=0x${element.id}, container=${!!child.container} at position=${elementPosition}`);\n                        await this.tokenizer.ignore(posDone - this.tokenizer.position);\n                        break;\n                    case ParseAction.TerminateParsing:\n                        debug(`Terminate parsing at element: name=${getElementPath(child)}, element.id=0x${element.id}, container=${!!child.container} at position=${elementPosition}`);\n                        return tree;\n                }\n            }\n            else {\n                switch (element.id) {\n                    case 0xec: // void\n                        this.padding += element.len;\n                        await this.tokenizer.ignore(element.len);\n                        break;\n                    default:\n                        debug(`parseEbml: parent=${getElementPath(dtdElement)}, unknown child: id=${element.id.toString(16)} at position=${elementPosition}`);\n                        this.padding += element.len;\n                        await this.tokenizer.ignore(element.len);\n                }\n            }\n        }\n        return tree;\n    }\n    async readVintData(maxLength) {\n        const msb = await this.tokenizer.peekNumber(UINT8);\n        let mask = 0x80;\n        let oc = 1;\n        // Calculate VINT_WIDTH\n        while ((msb & mask) === 0) {\n            if (oc > maxLength) {\n                throw new EbmlContentError('VINT value exceeding maximum size');\n            }\n            ++oc;\n            mask >>= 1;\n        }\n        const id = new Uint8Array(oc);\n        await this.tokenizer.readBuffer(id);\n        return id;\n    }\n    async readElement() {\n        const id = await this.readVintData(this.ebmlMaxIDLength);\n        const lenField = await this.readVintData(this.ebmlMaxSizeLength);\n        lenField[0] ^= 0x80 >> (lenField.length - 1);\n        return {\n            id: readUIntBE(id, id.length),\n            len: readUIntBE(lenField, lenField.length)\n        };\n    }\n    async readFloat(e) {\n        switch (e.len) {\n            case 0:\n                return 0.0;\n            case 4:\n                return this.tokenizer.readNumber(Float32_BE);\n            case 8:\n                return this.tokenizer.readNumber(Float64_BE);\n            case 10:\n                return this.tokenizer.readNumber(Float64_BE);\n            default:\n                throw new EbmlContentError(`Invalid IEEE-754 float length: ${e.len}`);\n        }\n    }\n    async readFlag(e) {\n        return (await this.readUint(e)) === 1;\n    }\n    async readUint(e) {\n        const buf = await this.readBuffer(e);\n        return readUIntBE(buf, e.len);\n    }\n    async readString(e) {\n        const rawString = await this.tokenizer.readToken(new StringType(e.len, 'utf-8'));\n        return rawString.replace(/\\x00.*$/g, '');\n    }\n    async readBuffer(e) {\n        const buf = new Uint8Array(e.len);\n        await this.tokenizer.readBuffer(buf);\n        return buf;\n    }\n}\nfunction readUIntBE(buf, len) {\n    return Number(readUIntBeAsBigInt(buf, len));\n}\n/**\n * Reeds an unsigned integer from a big endian buffer of length `len`\n * @param buf Buffer to decode from\n * @param len Number of bytes\n * @private\n */\nfunction readUIntBeAsBigInt(buf, len) {\n    const normalizedNumber = new Uint8Array(8);\n    const cleanNumber = buf.subarray(0, len);\n    try {\n        normalizedNumber.set(cleanNumber, 8 - len);\n        return Token.UINT64_BE.get(normalizedNumber, 0);\n    }\n    catch (_error) {\n        return BigInt(-1);\n    }\n}\nfunction linkParents(element) {\n    if (element.container) {\n        Object.keys(element.container)\n            .map(id => {\n            const child = element.container[id];\n            child.id = Number.parseInt(id);\n            return child;\n        }).forEach(child => {\n            child.parent = element;\n            linkParents(child);\n        });\n    }\n    return element;\n}\nexport function getElementPath(element) {\n    let path = '';\n    if (element.parent && element.parent.name !== 'dtd') {\n        path += `${getElementPath(element.parent)}/`;\n    }\n    return path + element.name;\n}\n//# sourceMappingURL=EbmlIterator.js.map","import initDebug from 'debug';\nimport { BasicParser } from '../common/BasicParser.js';\nimport { matroskaDtd } from './MatroskaDtd.js';\nimport { TargetType, TrackType } from './types.js';\nimport { EbmlIterator, ParseAction } from '../ebml/EbmlIterator.js';\nconst debug = initDebug('music-metadata:parser:matroska');\n/**\n * Extensible Binary Meta Language (EBML) parser\n * https://en.wikipedia.org/wiki/Extensible_Binary_Meta_Language\n * http://matroska.sourceforge.net/technical/specs/rfc/index.html\n *\n * WEBM VP8 AUDIO FILE\n */\nexport class MatroskaParser extends BasicParser {\n    constructor() {\n        super(...arguments);\n        this.seekHeadOffset = 0;\n        /**\n         * Use index to skip multiple segment/cluster elements at once.\n         * Significant performance impact\n         */\n        this.flagUseIndexToSkipClusters = this.options.mkvUseIndex ?? false;\n    }\n    async parse() {\n        const containerSize = this.tokenizer.fileInfo.size ?? Number.MAX_SAFE_INTEGER;\n        const matroskaIterator = new EbmlIterator(this.tokenizer);\n        debug('Initializing DTD end MatroskaIterator');\n        await matroskaIterator.iterate(matroskaDtd, containerSize, {\n            startNext: (element) => {\n                switch (element.id) {\n                    // case 0x1f43b675: // cluster\n                    case 0x1c53bb6b: // Cueing Data\n                        debug(`Skip element: name=${element.name}, id=0x${element.id.toString(16)}`);\n                        return ParseAction.IgnoreElement;\n                    case 0x1f43b675: // cluster\n                        if (this.flagUseIndexToSkipClusters && this.seekHead) {\n                            const index = this.seekHead.seek.find(index => index.position + this.seekHeadOffset > this.tokenizer.position);\n                            if (index) {\n                                // Go to next index position\n                                const ignoreSize = index.position + this.seekHeadOffset - this.tokenizer.position;\n                                debug(`Use index to go to next position, ignoring ${ignoreSize} bytes`);\n                                this.tokenizer.ignore(ignoreSize);\n                                return ParseAction.SkipElement;\n                            }\n                        }\n                        return ParseAction.IgnoreElement;\n                    default:\n                        return ParseAction.ReadNext;\n                }\n            },\n            elementValue: async (element, value, offset) => {\n                debug(`Received: name=${element.name}, value=${value}`);\n                switch (element.id) {\n                    case 0x4282: // docType\n                        this.metadata.setFormat('container', `EBML/${value}`);\n                        break;\n                    case 0x114d9b74:\n                        this.seekHead = value;\n                        this.seekHeadOffset = offset;\n                        break;\n                    case 0x1549a966:\n                        { // Info (Segment Information)\n                            const info = value;\n                            const timecodeScale = info.timecodeScale ? info.timecodeScale : 1000000;\n                            if (typeof info.duration === 'number') {\n                                const duration = info.duration * timecodeScale / 1000000000;\n                                await this.addTag('segment:title', info.title);\n                                this.metadata.setFormat('duration', Number(duration));\n                            }\n                        }\n                        break;\n                    case 0x1654ae6b:\n                        { // tracks\n                            const audioTracks = value;\n                            if (audioTracks?.entries) {\n                                audioTracks.entries.forEach(entry => {\n                                    const stream = {\n                                        codecName: entry.codecID.replace('A_', '').replace('V_', ''),\n                                        codecSettings: entry.codecSettings,\n                                        flagDefault: entry.flagDefault,\n                                        flagLacing: entry.flagLacing,\n                                        flagEnabled: entry.flagEnabled,\n                                        language: entry.language,\n                                        name: entry.name,\n                                        type: entry.trackType,\n                                        audio: entry.audio,\n                                        video: entry.video\n                                    };\n                                    this.metadata.addStreamInfo(stream);\n                                });\n                                const audioTrack = audioTracks.entries\n                                    .filter(entry => entry.trackType === TrackType.audio)\n                                    .reduce((acc, cur) => {\n                                    if (!acc)\n                                        return cur;\n                                    if (cur.flagDefault && !acc.flagDefault)\n                                        return cur;\n                                    if (cur.trackNumber < acc.trackNumber)\n                                        return cur;\n                                    return acc;\n                                }, null);\n                                if (audioTrack) {\n                                    this.metadata.setFormat('codec', audioTrack.codecID.replace('A_', ''));\n                                    this.metadata.setFormat('sampleRate', audioTrack.audio.samplingFrequency);\n                                    this.metadata.setFormat('numberOfChannels', audioTrack.audio.channels);\n                                }\n                            }\n                        }\n                        break;\n                    case 0x1254c367:\n                        { // tags\n                            const tags = value;\n                            await Promise.all(tags.tag.map(async (tag) => {\n                                const target = tag.target;\n                                const targetType = target?.targetTypeValue ? TargetType[target.targetTypeValue] : (target?.targetType ? target.targetType : 'track');\n                                await Promise.all(tag.simpleTags.map(async (simpleTag) => {\n                                    const value = simpleTag.string ? simpleTag.string : simpleTag.binary;\n                                    await this.addTag(`${targetType}:${simpleTag.name}`, value);\n                                }));\n                            }));\n                        }\n                        break;\n                    case 0x1941a469:\n                        { // attachments\n                            const attachments = value;\n                            await Promise.all(attachments.attachedFiles\n                                .filter(file => file.mimeType.startsWith('image/'))\n                                .map(file => this.addTag('picture', {\n                                data: file.data,\n                                format: file.mimeType,\n                                description: file.description,\n                                name: file.name\n                            })));\n                        }\n                        break;\n                }\n            }\n        });\n    }\n    async addTag(tagId, value) {\n        await this.metadata.addTag('matroska', tagId, value);\n    }\n}\n//# sourceMappingURL=MatroskaParser.js.map"],"names":["DataType","matroskaDtd","debug","initDebug","EbmlContentError","makeUnexpectedFileContentError","ParseAction","EbmlIterator","tokenizer","e","dtdElement","posDone","listener","linkParents","tree","element","elementPosition","error","EndOfStreamError","child","getElementPath","res","parser","value","maxLength","msb","UINT8","mask","oc","id","lenField","readUIntBE","Float32_BE","Float64_BE","buf","StringType","len","readUIntBeAsBigInt","normalizedNumber","cleanNumber","Token.UINT64_BE","path","MatroskaParser","BasicParser","containerSize","matroskaIterator","index","ignoreSize","offset","info","timecodeScale","duration","audioTracks","entry","stream","audioTrack","TrackType","acc","cur","tags","tag","target","targetType","TargetType","simpleTag","attachments","file","tagId"],"mappings":"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","x_google_ignoreList":[0,1,2,3]}
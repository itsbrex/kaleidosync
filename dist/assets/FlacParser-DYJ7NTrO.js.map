{"version":3,"file":"FlacParser-DYJ7NTrO.js","sources":["../../node_modules/music-metadata/lib/flac/FlacParser.js"],"sourcesContent":["import { UINT16_BE, UINT24_BE, Uint8ArrayType } from 'token-types';\nimport initDebug from 'debug';\nimport * as util from '../common/Util.js';\nimport { VorbisPictureToken } from '../ogg/vorbis/Vorbis.js';\nimport { AbstractID3Parser } from '../id3v2/AbstractID3Parser.js';\nimport { FourCcToken } from '../common/FourCC.js';\nimport { VorbisStream } from '../ogg/vorbis/VorbisStream.js';\nimport { VorbisDecoder } from '../ogg/vorbis/VorbisDecoder.js';\nimport { makeUnexpectedFileContentError } from '../ParseError.js';\nconst debug = initDebug('music-metadata:parser:FLAC');\nclass FlacContentError extends makeUnexpectedFileContentError('FLAC') {\n}\n/**\n * FLAC supports up to 128 kinds of metadata blocks; currently the following are defined:\n * ref: https://xiph.org/flac/format.html#metadata_block\n */\nconst BlockType = {\n    STREAMINFO: 0, // STREAMINFO\n    PADDING: 1, // PADDING\n    APPLICATION: 2, // APPLICATION\n    SEEKTABLE: 3, // SEEKTABLE\n    VORBIS_COMMENT: 4, // VORBIS_COMMENT\n    CUESHEET: 5, // CUESHEET\n    PICTURE: 6 // PICTURE\n};\nexport class FlacParser extends AbstractID3Parser {\n    constructor() {\n        super(...arguments);\n        this.vorbisParser = new VorbisStream(this.metadata, this.options);\n        this.padding = 0;\n    }\n    async postId3v2Parse() {\n        const fourCC = await this.tokenizer.readToken(FourCcToken);\n        if (fourCC.toString() !== 'fLaC') {\n            throw new FlacContentError('Invalid FLAC preamble');\n        }\n        this.metadata.setAudioOnly();\n        let blockHeader;\n        do {\n            // Read block header\n            blockHeader = await this.tokenizer.readToken(BlockHeader);\n            // Parse block data\n            await this.parseDataBlock(blockHeader);\n        } while (!blockHeader.lastBlock);\n        if (this.tokenizer.fileInfo.size && this.metadata.format.duration) {\n            const dataSize = this.tokenizer.fileInfo.size - this.tokenizer.position;\n            this.metadata.setFormat('bitrate', 8 * dataSize / this.metadata.format.duration);\n        }\n    }\n    async parseDataBlock(blockHeader) {\n        debug(`blockHeader type=${blockHeader.type}, length=${blockHeader.length}`);\n        switch (blockHeader.type) {\n            case BlockType.STREAMINFO:\n                return this.parseBlockStreamInfo(blockHeader.length);\n            case BlockType.PADDING:\n                this.padding += blockHeader.length;\n                break;\n            case BlockType.APPLICATION:\n                break;\n            case BlockType.SEEKTABLE:\n                break;\n            case BlockType.VORBIS_COMMENT:\n                return this.parseComment(blockHeader.length);\n            case BlockType.CUESHEET:\n                break;\n            case BlockType.PICTURE:\n                await this.parsePicture(blockHeader.length);\n                return;\n            default:\n                this.metadata.addWarning(`Unknown block type: ${blockHeader.type}`);\n        }\n        // Ignore data block\n        return this.tokenizer.ignore(blockHeader.length).then();\n    }\n    /**\n     * Parse STREAMINFO\n     */\n    async parseBlockStreamInfo(dataLen) {\n        if (dataLen !== BlockStreamInfo.len)\n            throw new FlacContentError('Unexpected block-stream-info length');\n        const streamInfo = await this.tokenizer.readToken(BlockStreamInfo);\n        this.metadata.setFormat('container', 'FLAC');\n        this.metadata.setFormat('codec', 'FLAC');\n        this.metadata.setFormat('lossless', true);\n        this.metadata.setFormat('numberOfChannels', streamInfo.channels);\n        this.metadata.setFormat('bitsPerSample', streamInfo.bitsPerSample);\n        this.metadata.setFormat('sampleRate', streamInfo.sampleRate);\n        if (streamInfo.totalSamples > 0) {\n            this.metadata.setFormat('duration', streamInfo.totalSamples / streamInfo.sampleRate);\n        }\n    }\n    /**\n     * Parse VORBIS_COMMENT\n     * Ref: https://www.xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-640004.2.3\n     */\n    async parseComment(dataLen) {\n        const data = await this.tokenizer.readToken(new Uint8ArrayType(dataLen));\n        const decoder = new VorbisDecoder(data, 0);\n        decoder.readStringUtf8(); // vendor (skip)\n        const commentListLength = decoder.readInt32();\n        const tags = new Array(commentListLength);\n        for (let i = 0; i < commentListLength; i++) {\n            tags[i] = decoder.parseUserComment();\n        }\n        await Promise.all(tags.map(tag => this.vorbisParser.addTag(tag.key, tag.value)));\n    }\n    async parsePicture(dataLen) {\n        if (this.options.skipCovers) {\n            return this.tokenizer.ignore(dataLen);\n        }\n        const picture = await this.tokenizer.readToken(new VorbisPictureToken(dataLen));\n        this.vorbisParser.addTag('METADATA_BLOCK_PICTURE', picture);\n    }\n}\nconst BlockHeader = {\n    len: 4,\n    get: (buf, off) => {\n        return {\n            lastBlock: util.getBit(buf, off, 7),\n            type: util.getBitAllignedNumber(buf, off, 1, 7),\n            length: UINT24_BE.get(buf, off + 1)\n        };\n    }\n};\n/**\n * METADATA_BLOCK_DATA\n * Ref: https://xiph.org/flac/format.html#metadata_block_streaminfo\n */\nconst BlockStreamInfo = {\n    len: 34,\n    get: (buf, off) => {\n        return {\n            // The minimum block size (in samples) used in the stream.\n            minimumBlockSize: UINT16_BE.get(buf, off),\n            // The maximum block size (in samples) used in the stream.\n            // (Minimum blocksize == maximum blocksize) implies a fixed-blocksize stream.\n            maximumBlockSize: UINT16_BE.get(buf, off + 2) / 1000,\n            // The minimum frame size (in bytes) used in the stream.\n            // May be 0 to imply the value is not known.\n            minimumFrameSize: UINT24_BE.get(buf, off + 4),\n            // The maximum frame size (in bytes) used in the stream.\n            // May be 0 to imply the value is not known.\n            maximumFrameSize: UINT24_BE.get(buf, off + 7),\n            // Sample rate in Hz. Though 20 bits are available,\n            // the maximum sample rate is limited by the structure of frame headers to 655350Hz.\n            // Also, a value of 0 is invalid.\n            sampleRate: UINT24_BE.get(buf, off + 10) >> 4,\n            // probably slower: sampleRate: common.getBitAllignedNumber(buf, off + 10, 0, 20),\n            // (number of channels)-1. FLAC supports from 1 to 8 channels\n            channels: util.getBitAllignedNumber(buf, off + 12, 4, 3) + 1,\n            // bits per sample)-1.\n            // FLAC supports from 4 to 32 bits per sample. Currently the reference encoder and decoders only support up to 24 bits per sample.\n            bitsPerSample: util.getBitAllignedNumber(buf, off + 12, 7, 5) + 1,\n            // Total samples in stream.\n            // 'Samples' means inter-channel sample, i.e. one second of 44.1Khz audio will have 44100 samples regardless of the number of channels.\n            // A value of zero here means the number of total samples is unknown.\n            totalSamples: util.getBitAllignedNumber(buf, off + 13, 4, 36),\n            // the MD5 hash of the file (see notes for usage... it's a littly tricky)\n            fileMD5: new Uint8ArrayType(16).get(buf, off + 18)\n        };\n    }\n};\n//# sourceMappingURL=FlacParser.js.map"],"names":["debug","initDebug","FlacContentError","makeUnexpectedFileContentError","BlockType","FlacParser","AbstractID3Parser","VorbisStream","FourCcToken","blockHeader","BlockHeader","dataSize","dataLen","BlockStreamInfo","streamInfo","data","Uint8ArrayType","decoder","VorbisDecoder","commentListLength","tags","i","tag","picture","VorbisPictureToken","buf","off","util.getBit","util.getBitAllignedNumber","UINT24_BE","UINT16_BE"],"mappings":"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","x_google_ignoreList":[0]}
{"version":3,"file":"socket-messaging-D9b8t4MZ.js","sources":["../../node_modules/@wearesage/vue/src/stores/socket-messaging.ts"],"sourcesContent":["import { defineStore, acceptHMRUpdate } from \"pinia\";\nimport { ref, computed, readonly, onBeforeUnmount } from \"vue\";\nimport { useSocketCore } from \"./socket-core\";\n\nexport interface DirectMessage {\n  id: string;\n  fromWalletAddress: string;\n  toWalletAddress: string;\n  message: string;\n  messageType: \"text\" | \"notification\" | \"system\";\n  timestamp: number;\n  data?: any;\n}\n\nexport interface NotificationMessage {\n  id: string;\n  type: \"info\" | \"success\" | \"warning\" | \"error\";\n  title: string;\n  message: string;\n  timestamp: number;\n  data?: any;\n  read?: boolean;\n}\n\nexport const useSocketMessaging = defineStore(\"socket-messaging\", () => {\n  const socketCore = useSocketCore();\n\n  // Message storage\n  const messages = ref<DirectMessage[]>([]);\n  const notifications = ref<NotificationMessage[]>([]);\n  const messageErrors = ref<string[]>([]);\n\n  // Computed\n  const unreadNotifications = computed(() => \n    notifications.value.filter(n => !n.read)\n  );\n\n  const unreadNotificationCount = computed(() => unreadNotifications.value.length);\n\n  const getMessagesByUser = computed(() => (walletAddress: string) => \n    messages.value.filter(m => \n      m.fromWalletAddress === walletAddress || m.toWalletAddress === walletAddress\n    ).sort((a, b) => a.timestamp - b.timestamp)\n  );\n\n  // Setup event listeners\n  const setupMessagingListeners = () => {\n    if (!socketCore.socket) {\n      console.warn(\"🚫 Cannot setup messaging listeners - socket not connected\");\n      return;\n    }\n\n    // Incoming direct messages\n    socketCore.on(\"user-message:received\", (data: {\n      fromWalletAddress: string;\n      message: string;\n      messageType: \"text\" | \"notification\" | \"system\";\n      messageId: string;\n      timestamp: number;\n      data?: any;\n    }) => {\n      console.log(\"📬 Received direct message from:\", data.fromWalletAddress);\n      \n      const message: DirectMessage = {\n        id: data.messageId,\n        fromWalletAddress: data.fromWalletAddress,\n        toWalletAddress: \"self\", // We're the recipient\n        message: data.message,\n        messageType: data.messageType,\n        timestamp: data.timestamp,\n        data: data.data\n      };\n\n      messages.value.push(message);\n      \n      // Emit custom event for UI updates\n      if (typeof window !== 'undefined') {\n        window.dispatchEvent(new CustomEvent('directMessageReceived', { \n          detail: message \n        }));\n      }\n    });\n\n    // Incoming notifications\n    socketCore.on(\"notification:received\", (data: {\n      id: string;\n      type: \"info\" | \"success\" | \"warning\" | \"error\";\n      title: string;\n      message: string;\n      timestamp: number;\n      data?: any;\n    }) => {\n      console.log(\"🔔 Received notification:\", data.title);\n      \n      const notification: NotificationMessage = {\n        ...data,\n        read: false\n      };\n\n      notifications.value.unshift(notification); // Add to beginning for latest first\n      \n      // Emit custom event for UI updates\n      if (typeof window !== 'undefined') {\n        window.dispatchEvent(new CustomEvent('notificationReceived', { \n          detail: notification \n        }));\n      }\n    });\n\n    // Message sending errors\n    socketCore.on(\"user-message:error\", (error: { message: string; code?: string }) => {\n      console.error(\"❌ Message error:\", error.message);\n      messageErrors.value.push(error.message);\n      \n      // Auto-remove error after 5 seconds\n      setTimeout(() => {\n        const index = messageErrors.value.indexOf(error.message);\n        if (index > -1) {\n          messageErrors.value.splice(index, 1);\n        }\n      }, 5000);\n    });\n\n    console.log(\"📡 Messaging listeners setup complete\");\n  };\n\n  // Actions\n  const sendMessage = (toWalletAddress: string, message: string, messageType: \"text\" | \"notification\" | \"system\" = \"text\", data?: any) => {\n    if (!socketCore.connected) {\n      console.warn(\"🚫 Cannot send message - socket not connected\");\n      return false;\n    }\n\n    const messageData = {\n      toWalletAddress,\n      message,\n      messageType,\n      timestamp: Date.now(),\n      data: data || {}\n    };\n\n    socketCore.emit(\"user-message:send\", messageData);\n    \n    // Add to local messages for immediate UI feedback\n    const localMessage: DirectMessage = {\n      id: `local_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      fromWalletAddress: \"self\", // We're the sender\n      toWalletAddress,\n      message,\n      messageType,\n      timestamp: messageData.timestamp,\n      data: messageData.data\n    };\n\n    messages.value.push(localMessage);\n    \n    console.log(`📤 Sent message to ${toWalletAddress.slice(0, 8)}...`);\n    return true;\n  };\n\n  const markNotificationRead = (notificationId: string) => {\n    const notification = notifications.value.find(n => n.id === notificationId);\n    if (notification) {\n      notification.read = true;\n    }\n  };\n\n  const markAllNotificationsRead = () => {\n    notifications.value.forEach(notification => {\n      notification.read = true;\n    });\n  };\n\n  const clearNotifications = () => {\n    notifications.value = [];\n  };\n\n  const clearMessages = () => {\n    messages.value = [];\n  };\n\n  const clearMessageErrors = () => {\n    messageErrors.value = [];\n  };\n\n  const removeOldMessages = (olderThanMs = 24 * 60 * 60 * 1000) => {\n    const cutoffTime = Date.now() - olderThanMs;\n    messages.value = messages.value.filter(m => m.timestamp > cutoffTime);\n  };\n\n  const removeOldNotifications = (olderThanMs = 7 * 24 * 60 * 60 * 1000) => {\n    const cutoffTime = Date.now() - olderThanMs;\n    notifications.value = notifications.value.filter(n => n.timestamp > cutoffTime);\n  };\n\n  // Clean up all messaging-related socket event listeners\n  const removeAllMessagingListeners = () => {\n    if (!socketCore.socket) return;\n\n    socketCore.off(\"user-message:received\");\n    socketCore.off(\"notification:received\");\n    socketCore.off(\"user-message:error\");\n    \n    console.log(\"🧹 Removed all messaging socket event listeners\");\n  };\n\n  // Cleanup on component unmount\n  onBeforeUnmount(() => {\n    console.log(\"🧹 Messaging store unmounting - cleaning up\");\n    \n    // Remove all socket event listeners\n    removeAllMessagingListeners();\n    \n    // Clear local message state\n    messages.value = [];\n    notifications.value = [];\n    messageErrors.value = [];\n  });\n\n  return {\n    // State (readonly)\n    messages: readonly(messages),\n    notifications: readonly(notifications),\n    messageErrors: readonly(messageErrors),\n\n    // Computed\n    unreadNotifications,\n    unreadNotificationCount,\n    getMessagesByUser,\n\n    // Actions\n    setupMessagingListeners,\n    sendMessage,\n    markNotificationRead,\n    markAllNotificationsRead,\n    clearNotifications,\n    clearMessages,\n    clearMessageErrors,\n    removeOldMessages,\n    removeOldNotifications,\n  };\n});\n\nif (import.meta.hot) {\n  import.meta.hot.accept(acceptHMRUpdate(useSocketMessaging, import.meta.hot));\n}"],"names":["useSocketMessaging","defineStore","socketCore","useSocketCore","messages","ref","notifications","messageErrors","unreadNotifications","computed","n","unreadNotificationCount","getMessagesByUser","walletAddress","m","a","b","setupMessagingListeners","data","message","notification","error","index","sendMessage","toWalletAddress","messageType","messageData","localMessage","markNotificationRead","notificationId","markAllNotificationsRead","clearNotifications","clearMessages","clearMessageErrors","removeOldMessages","olderThanMs","cutoffTime","removeOldNotifications","removeAllMessagingListeners","onBeforeUnmount","readonly"],"mappings":"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","x_google_ignoreList":[0]}
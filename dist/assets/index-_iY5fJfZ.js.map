{"version":3,"mappings":"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","names":["coinbaseWallet","parameters","version3","version4","walletProvider","accountsChanged","chainChanged","disconnect","createConnector","config","chainId","rest","provider","accounts","x","getAddress","currentChainId","error","UserRejectedRequestError","preference","createCoinbaseWalletSDK","__vitePreload","addEthereumChainParameter","chain","SwitchChainError","ChainNotConfiguredError","numberToHex","blockExplorerUrls","rpcUrls","addEthereumChain","_error","sdk","CoinbaseWalletSDK","SDK","n","walletExtensionChainId","jsonRpcUrl","safe","shimDisconnect","provider_","ProviderNotFoundError","withTimeout","SafeAppProvider","Provider"],"ignoreList":[0,1],"sources":["../../node_modules/@wagmi/connectors/dist/esm/coinbaseWallet.js","../../node_modules/@wagmi/connectors/dist/esm/safe.js"],"sourcesContent":["import { ChainNotConfiguredError, createConnector, } from '@wagmi/core';\nimport { SwitchChainError, UserRejectedRequestError, getAddress, numberToHex, } from 'viem';\ncoinbaseWallet.type = 'coinbaseWallet';\nexport function coinbaseWallet(parameters = {}) {\n    if (parameters.version === '3' || parameters.headlessMode)\n        return version3(parameters);\n    return version4(parameters);\n}\nfunction version4(parameters) {\n    let walletProvider;\n    let accountsChanged;\n    let chainChanged;\n    let disconnect;\n    return createConnector((config) => ({\n        id: 'coinbaseWalletSDK',\n        name: 'Coinbase Wallet',\n        rdns: 'com.coinbase.wallet',\n        type: coinbaseWallet.type,\n        async connect({ chainId, ...rest } = {}) {\n            try {\n                const provider = await this.getProvider();\n                const accounts = (await provider.request({\n                    method: 'eth_requestAccounts',\n                    params: 'instantOnboarding' in rest && rest.instantOnboarding\n                        ? [{ onboarding: 'instant' }]\n                        : [],\n                })).map((x) => getAddress(x));\n                if (!accountsChanged) {\n                    accountsChanged = this.onAccountsChanged.bind(this);\n                    provider.on('accountsChanged', accountsChanged);\n                }\n                if (!chainChanged) {\n                    chainChanged = this.onChainChanged.bind(this);\n                    provider.on('chainChanged', chainChanged);\n                }\n                if (!disconnect) {\n                    disconnect = this.onDisconnect.bind(this);\n                    provider.on('disconnect', disconnect);\n                }\n                // Switch to chain if provided\n                let currentChainId = await this.getChainId();\n                if (chainId && currentChainId !== chainId) {\n                    const chain = await this.switchChain({ chainId }).catch((error) => {\n                        if (error.code === UserRejectedRequestError.code)\n                            throw error;\n                        return { id: currentChainId };\n                    });\n                    currentChainId = chain?.id ?? currentChainId;\n                }\n                return { accounts, chainId: currentChainId };\n            }\n            catch (error) {\n                if (/(user closed modal|accounts received is empty|user denied account|request rejected)/i.test(error.message))\n                    throw new UserRejectedRequestError(error);\n                throw error;\n            }\n        },\n        async disconnect() {\n            const provider = await this.getProvider();\n            if (accountsChanged) {\n                provider.removeListener('accountsChanged', accountsChanged);\n                accountsChanged = undefined;\n            }\n            if (chainChanged) {\n                provider.removeListener('chainChanged', chainChanged);\n                chainChanged = undefined;\n            }\n            if (disconnect) {\n                provider.removeListener('disconnect', disconnect);\n                disconnect = undefined;\n            }\n            provider.disconnect();\n            provider.close?.();\n        },\n        async getAccounts() {\n            const provider = await this.getProvider();\n            return (await provider.request({\n                method: 'eth_accounts',\n            })).map((x) => getAddress(x));\n        },\n        async getChainId() {\n            const provider = await this.getProvider();\n            const chainId = (await provider.request({\n                method: 'eth_chainId',\n            }));\n            return Number(chainId);\n        },\n        async getProvider() {\n            if (!walletProvider) {\n                const preference = (() => {\n                    if (typeof parameters.preference === 'string')\n                        return { options: parameters.preference };\n                    return {\n                        ...parameters.preference,\n                        options: parameters.preference?.options ?? 'all',\n                    };\n                })();\n                const { createCoinbaseWalletSDK } = await import('@coinbase/wallet-sdk');\n                const sdk = createCoinbaseWalletSDK({\n                    ...parameters,\n                    appChainIds: config.chains.map((x) => x.id),\n                    preference,\n                });\n                walletProvider = sdk.getProvider();\n            }\n            return walletProvider;\n        },\n        async isAuthorized() {\n            try {\n                const accounts = await this.getAccounts();\n                return !!accounts.length;\n            }\n            catch {\n                return false;\n            }\n        },\n        async switchChain({ addEthereumChainParameter, chainId }) {\n            const chain = config.chains.find((chain) => chain.id === chainId);\n            if (!chain)\n                throw new SwitchChainError(new ChainNotConfiguredError());\n            const provider = await this.getProvider();\n            try {\n                await provider.request({\n                    method: 'wallet_switchEthereumChain',\n                    params: [{ chainId: numberToHex(chain.id) }],\n                });\n                return chain;\n            }\n            catch (error) {\n                // Indicates chain is not added to provider\n                if (error.code === 4902) {\n                    try {\n                        let blockExplorerUrls;\n                        if (addEthereumChainParameter?.blockExplorerUrls)\n                            blockExplorerUrls = addEthereumChainParameter.blockExplorerUrls;\n                        else\n                            blockExplorerUrls = chain.blockExplorers?.default.url\n                                ? [chain.blockExplorers?.default.url]\n                                : [];\n                        let rpcUrls;\n                        if (addEthereumChainParameter?.rpcUrls?.length)\n                            rpcUrls = addEthereumChainParameter.rpcUrls;\n                        else\n                            rpcUrls = [chain.rpcUrls.default?.http[0] ?? ''];\n                        const addEthereumChain = {\n                            blockExplorerUrls,\n                            chainId: numberToHex(chainId),\n                            chainName: addEthereumChainParameter?.chainName ?? chain.name,\n                            iconUrls: addEthereumChainParameter?.iconUrls,\n                            nativeCurrency: addEthereumChainParameter?.nativeCurrency ??\n                                chain.nativeCurrency,\n                            rpcUrls,\n                        };\n                        await provider.request({\n                            method: 'wallet_addEthereumChain',\n                            params: [addEthereumChain],\n                        });\n                        return chain;\n                    }\n                    catch (error) {\n                        throw new UserRejectedRequestError(error);\n                    }\n                }\n                throw new SwitchChainError(error);\n            }\n        },\n        onAccountsChanged(accounts) {\n            if (accounts.length === 0)\n                this.onDisconnect();\n            else\n                config.emitter.emit('change', {\n                    accounts: accounts.map((x) => getAddress(x)),\n                });\n        },\n        onChainChanged(chain) {\n            const chainId = Number(chain);\n            config.emitter.emit('change', { chainId });\n        },\n        async onDisconnect(_error) {\n            config.emitter.emit('disconnect');\n            const provider = await this.getProvider();\n            if (accountsChanged) {\n                provider.removeListener('accountsChanged', accountsChanged);\n                accountsChanged = undefined;\n            }\n            if (chainChanged) {\n                provider.removeListener('chainChanged', chainChanged);\n                chainChanged = undefined;\n            }\n            if (disconnect) {\n                provider.removeListener('disconnect', disconnect);\n                disconnect = undefined;\n            }\n        },\n    }));\n}\nfunction version3(parameters) {\n    const reloadOnDisconnect = false;\n    let sdk;\n    let walletProvider;\n    let accountsChanged;\n    let chainChanged;\n    let disconnect;\n    return createConnector((config) => ({\n        id: 'coinbaseWalletSDK',\n        name: 'Coinbase Wallet',\n        rdns: 'com.coinbase.wallet',\n        type: coinbaseWallet.type,\n        async connect({ chainId } = {}) {\n            try {\n                const provider = await this.getProvider();\n                const accounts = (await provider.request({\n                    method: 'eth_requestAccounts',\n                })).map((x) => getAddress(x));\n                if (!accountsChanged) {\n                    accountsChanged = this.onAccountsChanged.bind(this);\n                    provider.on('accountsChanged', accountsChanged);\n                }\n                if (!chainChanged) {\n                    chainChanged = this.onChainChanged.bind(this);\n                    provider.on('chainChanged', chainChanged);\n                }\n                if (!disconnect) {\n                    disconnect = this.onDisconnect.bind(this);\n                    provider.on('disconnect', disconnect);\n                }\n                // Switch to chain if provided\n                let currentChainId = await this.getChainId();\n                if (chainId && currentChainId !== chainId) {\n                    const chain = await this.switchChain({ chainId }).catch((error) => {\n                        if (error.code === UserRejectedRequestError.code)\n                            throw error;\n                        return { id: currentChainId };\n                    });\n                    currentChainId = chain?.id ?? currentChainId;\n                }\n                return { accounts, chainId: currentChainId };\n            }\n            catch (error) {\n                if (/(user closed modal|accounts received is empty|user denied account)/i.test(error.message))\n                    throw new UserRejectedRequestError(error);\n                throw error;\n            }\n        },\n        async disconnect() {\n            const provider = await this.getProvider();\n            if (accountsChanged) {\n                provider.removeListener('accountsChanged', accountsChanged);\n                accountsChanged = undefined;\n            }\n            if (chainChanged) {\n                provider.removeListener('chainChanged', chainChanged);\n                chainChanged = undefined;\n            }\n            if (disconnect) {\n                provider.removeListener('disconnect', disconnect);\n                disconnect = undefined;\n            }\n            provider.disconnect();\n            provider.close();\n        },\n        async getAccounts() {\n            const provider = await this.getProvider();\n            return (await provider.request({\n                method: 'eth_accounts',\n            })).map((x) => getAddress(x));\n        },\n        async getChainId() {\n            const provider = await this.getProvider();\n            const chainId = await provider.request({\n                method: 'eth_chainId',\n            });\n            return Number(chainId);\n        },\n        async getProvider() {\n            if (!walletProvider) {\n                // Unwrapping import for Vite compatibility.\n                // See: https://github.com/vitejs/vite/issues/9703\n                const CoinbaseWalletSDK = await (async () => {\n                    const { default: SDK } = await import('cbw-sdk');\n                    if (typeof SDK !== 'function' && typeof SDK.default === 'function')\n                        return SDK.default;\n                    return SDK;\n                })();\n                sdk = new CoinbaseWalletSDK({ ...parameters, reloadOnDisconnect });\n                // Force types to retrieve private `walletExtension` method from the Coinbase Wallet SDK.\n                const walletExtensionChainId = sdk.walletExtension?.getChainId();\n                const chain = config.chains.find((chain) => parameters.chainId\n                    ? chain.id === parameters.chainId\n                    : chain.id === walletExtensionChainId) || config.chains[0];\n                const chainId = parameters.chainId || chain?.id;\n                const jsonRpcUrl = parameters.jsonRpcUrl || chain?.rpcUrls.default.http[0];\n                walletProvider = sdk.makeWeb3Provider(jsonRpcUrl, chainId);\n            }\n            return walletProvider;\n        },\n        async isAuthorized() {\n            try {\n                const accounts = await this.getAccounts();\n                return !!accounts.length;\n            }\n            catch {\n                return false;\n            }\n        },\n        async switchChain({ addEthereumChainParameter, chainId }) {\n            const chain = config.chains.find((chain) => chain.id === chainId);\n            if (!chain)\n                throw new SwitchChainError(new ChainNotConfiguredError());\n            const provider = await this.getProvider();\n            try {\n                await provider.request({\n                    method: 'wallet_switchEthereumChain',\n                    params: [{ chainId: numberToHex(chain.id) }],\n                });\n                return chain;\n            }\n            catch (error) {\n                // Indicates chain is not added to provider\n                if (error.code === 4902) {\n                    try {\n                        let blockExplorerUrls;\n                        if (addEthereumChainParameter?.blockExplorerUrls)\n                            blockExplorerUrls = addEthereumChainParameter.blockExplorerUrls;\n                        else\n                            blockExplorerUrls = chain.blockExplorers?.default.url\n                                ? [chain.blockExplorers?.default.url]\n                                : [];\n                        let rpcUrls;\n                        if (addEthereumChainParameter?.rpcUrls?.length)\n                            rpcUrls = addEthereumChainParameter.rpcUrls;\n                        else\n                            rpcUrls = [chain.rpcUrls.default?.http[0] ?? ''];\n                        const addEthereumChain = {\n                            blockExplorerUrls,\n                            chainId: numberToHex(chainId),\n                            chainName: addEthereumChainParameter?.chainName ?? chain.name,\n                            iconUrls: addEthereumChainParameter?.iconUrls,\n                            nativeCurrency: addEthereumChainParameter?.nativeCurrency ??\n                                chain.nativeCurrency,\n                            rpcUrls,\n                        };\n                        await provider.request({\n                            method: 'wallet_addEthereumChain',\n                            params: [addEthereumChain],\n                        });\n                        return chain;\n                    }\n                    catch (error) {\n                        throw new UserRejectedRequestError(error);\n                    }\n                }\n                throw new SwitchChainError(error);\n            }\n        },\n        onAccountsChanged(accounts) {\n            if (accounts.length === 0)\n                this.onDisconnect();\n            else\n                config.emitter.emit('change', {\n                    accounts: accounts.map((x) => getAddress(x)),\n                });\n        },\n        onChainChanged(chain) {\n            const chainId = Number(chain);\n            config.emitter.emit('change', { chainId });\n        },\n        async onDisconnect(_error) {\n            config.emitter.emit('disconnect');\n            const provider = await this.getProvider();\n            if (accountsChanged) {\n                provider.removeListener('accountsChanged', accountsChanged);\n                accountsChanged = undefined;\n            }\n            if (chainChanged) {\n                provider.removeListener('chainChanged', chainChanged);\n                chainChanged = undefined;\n            }\n            if (disconnect) {\n                provider.removeListener('disconnect', disconnect);\n                disconnect = undefined;\n            }\n        },\n    }));\n}\n//# sourceMappingURL=coinbaseWallet.js.map","import { ProviderNotFoundError, createConnector, } from '@wagmi/core';\nimport { getAddress, withTimeout } from 'viem';\nsafe.type = 'safe';\nexport function safe(parameters = {}) {\n    const { shimDisconnect = false } = parameters;\n    let provider_;\n    let disconnect;\n    return createConnector((config) => ({\n        id: 'safe',\n        name: 'Safe',\n        type: safe.type,\n        async connect() {\n            const provider = await this.getProvider();\n            if (!provider)\n                throw new ProviderNotFoundError();\n            const accounts = await this.getAccounts();\n            const chainId = await this.getChainId();\n            if (!disconnect) {\n                disconnect = this.onDisconnect.bind(this);\n                provider.on('disconnect', disconnect);\n            }\n            // Remove disconnected shim if it exists\n            if (shimDisconnect)\n                await config.storage?.removeItem('safe.disconnected');\n            return { accounts, chainId };\n        },\n        async disconnect() {\n            const provider = await this.getProvider();\n            if (!provider)\n                throw new ProviderNotFoundError();\n            if (disconnect) {\n                provider.removeListener('disconnect', disconnect);\n                disconnect = undefined;\n            }\n            // Add shim signalling connector is disconnected\n            if (shimDisconnect)\n                await config.storage?.setItem('safe.disconnected', true);\n        },\n        async getAccounts() {\n            const provider = await this.getProvider();\n            if (!provider)\n                throw new ProviderNotFoundError();\n            return (await provider.request({ method: 'eth_accounts' })).map(getAddress);\n        },\n        async getProvider() {\n            // Only allowed in iframe context\n            const isIframe = typeof window !== 'undefined' && window?.parent !== window;\n            if (!isIframe)\n                return;\n            if (!provider_) {\n                const { default: SDK } = await import('@safe-global/safe-apps-sdk');\n                const sdk = new SDK(parameters);\n                // `getInfo` hangs when not used in Safe App iFrame\n                // https://github.com/safe-global/safe-apps-sdk/issues/263#issuecomment-1029835840\n                const safe = await withTimeout(() => sdk.safe.getInfo(), {\n                    timeout: parameters.unstable_getInfoTimeout ?? 10,\n                });\n                if (!safe)\n                    throw new Error('Could not load Safe information');\n                // Unwrapping import for Vite compatibility.\n                // See: https://github.com/vitejs/vite/issues/9703\n                const SafeAppProvider = await (async () => {\n                    const Provider = await import('@safe-global/safe-apps-provider');\n                    if (typeof Provider.SafeAppProvider !== 'function' &&\n                        typeof Provider.default.SafeAppProvider === 'function')\n                        return Provider.default.SafeAppProvider;\n                    return Provider.SafeAppProvider;\n                })();\n                provider_ = new SafeAppProvider(safe, sdk);\n            }\n            return provider_;\n        },\n        async getChainId() {\n            const provider = await this.getProvider();\n            if (!provider)\n                throw new ProviderNotFoundError();\n            return Number(provider.chainId);\n        },\n        async isAuthorized() {\n            try {\n                const isDisconnected = shimDisconnect &&\n                    // If shim exists in storage, connector is disconnected\n                    (await config.storage?.getItem('safe.disconnected'));\n                if (isDisconnected)\n                    return false;\n                const accounts = await this.getAccounts();\n                return !!accounts.length;\n            }\n            catch {\n                return false;\n            }\n        },\n        onAccountsChanged() {\n            // Not relevant for Safe because changing account requires app reload.\n        },\n        onChainChanged() {\n            // Not relevant for Safe because Safe smart contract wallets only exist on single chain.\n        },\n        onDisconnect() {\n            config.emitter.emit('disconnect');\n        },\n    }));\n}\n//# sourceMappingURL=safe.js.map"],"file":"assets/index-_iY5fJfZ.js"}
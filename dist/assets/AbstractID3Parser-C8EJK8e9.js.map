{"version":3,"file":"AbstractID3Parser-C8EJK8e9.js","sources":["../../../vue/node_modules/music-metadata/lib/id3v2/AbstractID3Parser.js"],"sourcesContent":["import { EndOfStreamError } from 'strtok3';\nimport initDebug from 'debug';\nimport { ID3v2Header } from './ID3v2Token.js';\nimport { ID3v2Parser } from './ID3v2Parser.js';\nimport { ID3v1Parser } from '../id3v1/ID3v1Parser.js';\nimport { BasicParser } from '../common/BasicParser.js';\nconst debug = initDebug('music-metadata:parser:ID3');\n/**\n * Abstract parser which tries take ID3v2 and ID3v1 headers.\n */\nexport class AbstractID3Parser extends BasicParser {\n    constructor() {\n        super(...arguments);\n        this.id3parser = new ID3v2Parser();\n    }\n    static async startsWithID3v2Header(tokenizer) {\n        return (await tokenizer.peekToken(ID3v2Header)).fileIdentifier === 'ID3';\n    }\n    async parse() {\n        try {\n            await this.parseID3v2();\n        }\n        catch (err) {\n            if (err instanceof EndOfStreamError) {\n                debug(\"End-of-stream\");\n            }\n            else {\n                throw err;\n            }\n        }\n    }\n    finalize() {\n        return;\n    }\n    async parseID3v2() {\n        await this.tryReadId3v2Headers();\n        debug('End of ID3v2 header, go to MPEG-parser: pos=%s', this.tokenizer.position);\n        await this.postId3v2Parse();\n        if (this.options.skipPostHeaders && this.metadata.hasAny()) {\n            this.finalize();\n        }\n        else {\n            const id3v1parser = new ID3v1Parser(this.metadata, this.tokenizer, this.options);\n            await id3v1parser.parse();\n            this.finalize();\n        }\n    }\n    async tryReadId3v2Headers() {\n        const id3Header = await this.tokenizer.peekToken(ID3v2Header);\n        if (id3Header.fileIdentifier === 'ID3') {\n            debug('Found ID3v2 header, pos=%s', this.tokenizer.position);\n            await this.id3parser.parse(this.metadata, this.tokenizer, this.options);\n            return this.tryReadId3v2Headers();\n        }\n    }\n}\n//# sourceMappingURL=AbstractID3Parser.js.map"],"names":["debug","initDebug","AbstractID3Parser","BasicParser","ID3v2Parser","tokenizer","ID3v2Header","err","EndOfStreamError","ID3v1Parser"],"mappings":"6HAMA,MAAMA,EAAQC,EAAU,2BAA2B,EAI5C,MAAMC,UAA0BC,CAAY,CAC/C,aAAc,CACV,MAAM,GAAG,SAAS,EAClB,KAAK,UAAY,IAAIC,CACzB,CACA,aAAa,sBAAsBC,EAAW,CAC1C,OAAQ,MAAMA,EAAU,UAAUC,CAAW,GAAG,iBAAmB,KACvE,CACA,MAAM,OAAQ,CACV,GAAI,CACA,MAAM,KAAK,WAAU,CACzB,OACOC,EAAK,CACR,GAAIA,aAAeC,EACfR,EAAM,eAAe,MAGrB,OAAMO,CAEd,CACJ,CACA,UAAW,CAEX,CACA,MAAM,YAAa,CACf,MAAM,KAAK,oBAAmB,EAC9BP,EAAM,iDAAkD,KAAK,UAAU,QAAQ,EAC/E,MAAM,KAAK,eAAc,EACrB,KAAK,QAAQ,iBAAmB,KAAK,SAAS,SAC9C,KAAK,SAAQ,GAIb,MADoB,IAAIS,EAAY,KAAK,SAAU,KAAK,UAAW,KAAK,OAAO,EAC7D,MAAK,EACvB,KAAK,SAAQ,EAErB,CACA,MAAM,qBAAsB,CAExB,IADkB,MAAM,KAAK,UAAU,UAAUH,CAAW,GAC9C,iBAAmB,MAC7B,OAAAN,EAAM,6BAA8B,KAAK,UAAU,QAAQ,EAC3D,MAAM,KAAK,UAAU,MAAM,KAAK,SAAU,KAAK,UAAW,KAAK,OAAO,EAC/D,KAAK,oBAAmB,CAEvC,CACJ","x_google_ignoreList":[0]}
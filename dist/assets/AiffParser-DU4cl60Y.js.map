{"version":3,"file":"AiffParser-DU4cl60Y.js","sources":["../../node_modules/music-metadata/lib/aiff/AiffToken.js","../../node_modules/music-metadata/lib/iff/index.js","../../node_modules/music-metadata/lib/aiff/AiffParser.js"],"sourcesContent":["import * as Token from 'token-types';\nimport { FourCcToken } from '../common/FourCC.js';\nimport { makeUnexpectedFileContentError } from '../ParseError.js';\nexport const compressionTypes = {\n    NONE: 'not compressed\tPCM\tApple Computer',\n    sowt: 'PCM (byte swapped)',\n    fl32: '32-bit floating point IEEE 32-bit float',\n    fl64: '64-bit floating point IEEE 64-bit float\tApple Computer',\n    alaw: 'ALaw 2:1\t8-bit ITU-T G.711 A-law',\n    ulaw: 'µLaw 2:1\t8-bit ITU-T G.711 µ-law\tApple Computer',\n    ULAW: 'CCITT G.711 u-law 8-bit ITU-T G.711 µ-law',\n    ALAW: 'CCITT G.711 A-law 8-bit ITU-T G.711 A-law',\n    FL32: 'Float 32\tIEEE 32-bit float '\n};\nexport class AiffContentError extends makeUnexpectedFileContentError('AIFF') {\n}\nexport class Common {\n    constructor(header, isAifc) {\n        this.isAifc = isAifc;\n        const minimumChunkSize = isAifc ? 22 : 18;\n        if (header.chunkSize < minimumChunkSize)\n            throw new AiffContentError(`COMMON CHUNK size should always be at least ${minimumChunkSize}`);\n        this.len = header.chunkSize;\n    }\n    get(buf, off) {\n        // see: https://cycling74.com/forums/aiffs-80-bit-sample-rate-value\n        const shift = Token.UINT16_BE.get(buf, off + 8) - 16398;\n        const baseSampleRate = Token.UINT16_BE.get(buf, off + 8 + 2);\n        const res = {\n            numChannels: Token.UINT16_BE.get(buf, off),\n            numSampleFrames: Token.UINT32_BE.get(buf, off + 2),\n            sampleSize: Token.UINT16_BE.get(buf, off + 6),\n            sampleRate: shift < 0 ? baseSampleRate >> Math.abs(shift) : baseSampleRate << shift\n        };\n        if (this.isAifc) {\n            res.compressionType = FourCcToken.get(buf, off + 18);\n            if (this.len > 22) {\n                const strLen = Token.UINT8.get(buf, off + 22);\n                if (strLen > 0) {\n                    const padding = (strLen + 1) % 2;\n                    if (23 + strLen + padding === this.len) {\n                        res.compressionName = new Token.StringType(strLen, 'latin1').get(buf, off + 23);\n                    }\n                    else {\n                        throw new AiffContentError('Illegal pstring length');\n                    }\n                }\n                else {\n                    res.compressionName = undefined;\n                }\n            }\n        }\n        else {\n            res.compressionName = 'PCM';\n        }\n        return res;\n    }\n}\n//# sourceMappingURL=AiffToken.js.map","import * as Token from 'token-types';\nimport { FourCcToken } from '../common/FourCC.js';\n/**\n * Common AIFF chunk header\n */\nexport const Header = {\n    len: 8,\n    get: (buf, off) => {\n        return {\n            // Chunk type ID\n            chunkID: FourCcToken.get(buf, off),\n            // Chunk size\n            chunkSize: Number(BigInt(Token.UINT32_BE.get(buf, off + 4)))\n        };\n    }\n};\n//# sourceMappingURL=index.js.map","import * as Token from 'token-types';\nimport initDebug from 'debug';\nimport * as strtok3 from 'strtok3';\nimport { ID3v2Parser } from '../id3v2/ID3v2Parser.js';\nimport { FourCcToken } from '../common/FourCC.js';\nimport { BasicParser } from '../common/BasicParser.js';\nimport * as AiffToken from './AiffToken.js';\nimport { AiffContentError, compressionTypes } from './AiffToken.js';\nimport * as iff from '../iff/index.js';\nconst debug = initDebug('music-metadata:parser:aiff');\n/**\n * AIFF - Audio Interchange File Format\n *\n * Ref:\n * - http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/AIFF/AIFF.html\n * - http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/AIFF/Docs/AIFF-1.3.pdf\n */\nexport class AIFFParser extends BasicParser {\n    constructor() {\n        super(...arguments);\n        this.isCompressed = null;\n    }\n    async parse() {\n        const header = await this.tokenizer.readToken(iff.Header);\n        if (header.chunkID !== 'FORM')\n            throw new AiffContentError('Invalid Chunk-ID, expected \\'FORM\\''); // Not AIFF format\n        const type = await this.tokenizer.readToken(FourCcToken);\n        switch (type) {\n            case 'AIFF':\n                this.metadata.setFormat('container', type);\n                this.isCompressed = false;\n                break;\n            case 'AIFC':\n                this.metadata.setFormat('container', 'AIFF-C');\n                this.isCompressed = true;\n                break;\n            default:\n                throw new AiffContentError(`Unsupported AIFF type: ${type}`);\n        }\n        this.metadata.setFormat('lossless', !this.isCompressed);\n        this.metadata.setAudioOnly();\n        try {\n            while (!this.tokenizer.fileInfo.size || this.tokenizer.fileInfo.size - this.tokenizer.position >= iff.Header.len) {\n                debug(`Reading AIFF chunk at offset=${this.tokenizer.position}`);\n                const chunkHeader = await this.tokenizer.readToken(iff.Header);\n                const nextChunk = 2 * Math.round(chunkHeader.chunkSize / 2);\n                const bytesRead = await this.readData(chunkHeader);\n                await this.tokenizer.ignore(nextChunk - bytesRead);\n            }\n        }\n        catch (err) {\n            if (err instanceof strtok3.EndOfStreamError) {\n                debug(\"End-of-stream\");\n            }\n            else {\n                throw err;\n            }\n        }\n    }\n    async readData(header) {\n        switch (header.chunkID) {\n            case 'COMM': { // The Common Chunk\n                if (this.isCompressed === null) {\n                    throw new AiffContentError('Failed to parse AIFF.COMM chunk when compression type is unknown');\n                }\n                const common = await this.tokenizer.readToken(new AiffToken.Common(header, this.isCompressed));\n                this.metadata.setFormat('bitsPerSample', common.sampleSize);\n                this.metadata.setFormat('sampleRate', common.sampleRate);\n                this.metadata.setFormat('numberOfChannels', common.numChannels);\n                this.metadata.setFormat('numberOfSamples', common.numSampleFrames);\n                this.metadata.setFormat('duration', common.numSampleFrames / common.sampleRate);\n                if (common.compressionName || common.compressionType) {\n                    this.metadata.setFormat('codec', common.compressionName ?? compressionTypes[common.compressionType]);\n                }\n                return header.chunkSize;\n            }\n            case 'ID3 ': { // ID3-meta-data\n                const id3_data = await this.tokenizer.readToken(new Token.Uint8ArrayType(header.chunkSize));\n                const rst = strtok3.fromBuffer(id3_data);\n                await new ID3v2Parser().parse(this.metadata, rst, this.options);\n                return header.chunkSize;\n            }\n            case 'SSND': // Sound Data Chunk\n                if (this.metadata.format.duration) {\n                    this.metadata.setFormat('bitrate', 8 * header.chunkSize / this.metadata.format.duration);\n                }\n                return 0;\n            case 'NAME': // Sample name chunk\n            case 'AUTH': // Author chunk\n            case '(c) ': // Copyright chunk\n            case 'ANNO': // Annotation chunk\n                return this.readTextChunk(header);\n            default:\n                debug(`Ignore chunk id=${header.chunkID}, size=${header.chunkSize}`);\n                return 0;\n        }\n    }\n    async readTextChunk(header) {\n        const value = await this.tokenizer.readToken(new Token.StringType(header.chunkSize, 'ascii'));\n        const values = value.split('\\0').map(v => v.trim()).filter(v => v?.length);\n        await Promise.all(values.map(v => this.metadata.addTag('AIFF', header.chunkID, v)));\n        return header.chunkSize;\n    }\n}\n//# sourceMappingURL=AiffParser.js.map"],"names":["compressionTypes","AiffContentError","makeUnexpectedFileContentError","Common","header","isAifc","minimumChunkSize","buf","off","shift","Token.UINT16_BE","baseSampleRate","res","Token.UINT32_BE","FourCcToken","strLen","Token.UINT8","padding","Token.StringType","Header","debug","initDebug","AIFFParser","BasicParser","iff.Header","type","chunkHeader","nextChunk","bytesRead","err","strtok3.EndOfStreamError","common","AiffToken.Common","id3_data","Token.Uint8ArrayType","rst","strtok3.fromBuffer","ID3v2Parser","values","v"],"mappings":"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","x_google_ignoreList":[0,1,2]}
import{a8 as O,aa as U,A as x,ak as M,r as g,c as E,y as R,al as S,am as a,a9 as L,an as N}from"./index-DmvewjL6.js";const F=O("socket-space",()=>{const o=U(),r=x(),t=new M.EventEmitter,u=g(new Set),c=g(new Map),d=g(new Map),l=g(new Map),P=E(()=>e=>c.value.get(e)||[]),w=E(()=>e=>{const s=d.value.get(e);return s?Array.from(s.values()):[]}),y=E(()=>e=>{const s=l.value.get(e);return s?Array.from(s.values()):[]}),k=E(()=>(e,s)=>{const n=l.value.get(e);if(!n)return!1;for(const i of n.values())if(i.taskId===s)return!0;return!1});let m=!1;const j=()=>{if(console.log("🚀 SOCKET-SPACE: Setting up unified space listeners..."),m){console.log("🚀 SOCKET-SPACE: Listeners already set up, skipping...");return}if(!o.socket){console.warn("🚫 Cannot setup space listeners - socket not connected");return}console.log("🚀 SOCKET-SPACE: Socket exists, setting up unified listeners..."),m=!0,o.on(a.SPACE_JOINED,e=>{console.log(`🎯 User joined space ${e.spaceId}:`,e.userWalletAddress),c.value.has(e.spaceId)||c.value.set(e.spaceId,[]);const s=c.value.get(e.spaceId),n=s.findIndex(i=>i.walletAddress===e.userWalletAddress);n>=0?s[n].lastSeen=e.timestamp:s.push({walletAddress:e.userWalletAddress,joinedAt:e.timestamp,lastSeen:e.timestamp}),t.emit("space-user-joined",e)}),o.on(a.SPACE_LEFT,e=>{console.log(`👋 User left space ${e.spaceId}:`,e.userWalletAddress);const s=c.value.get(e.spaceId);if(s){const p=s.filter(A=>A.walletAddress!==e.userWalletAddress);c.value.set(e.spaceId,p)}const n=d.value.get(e.spaceId);n&&n.delete(e.userWalletAddress);const i=l.value.get(e.spaceId);i&&i.delete(e.userWalletAddress),t.emit("space-user-left",e)}),o.on(a.SPACE_CURSOR_MOVE,e=>{d.value.has(e.spaceId)||d.value.set(e.spaceId,new Map),d.value.get(e.spaceId).set(e.walletAddress,{walletAddress:e.walletAddress,x:e.x,y:e.y,timestamp:e.timestamp}),t.emit("space-cursor-move",e)}),o.on(a.SPACE_DRAG_START,e=>{console.log(`🏗️ Drag started by ${e.walletAddress}:`,e.taskId),l.value.has(e.spaceId)||l.value.set(e.spaceId,new Map),l.value.get(e.spaceId).set(e.walletAddress,{walletAddress:e.walletAddress,taskId:e.taskId,timestamp:e.timestamp}),t.emit("space-drag-start",e)}),o.on(a.SPACE_DRAG_END,e=>{console.log(`🎯 Drag ended by ${e.walletAddress}:`,e.taskId);const s=l.value.get(e.spaceId);s&&s.delete(e.walletAddress),t.emit("space-drag-end",e)}),o.on(a.SPACE_PROJECT_CREATE,e=>{console.log(`✨ SPACE: Project created by ${e.walletAddress}:`,e.context.entityId),t.emit("project-created",e)}),o.on(a.SPACE_PROJECT_UPDATE,e=>{console.log(`📝 SPACE: Project updated by ${e.walletAddress}:`,e.context.entityId),t.emit("project-updated",e)}),o.on(a.SPACE_PROJECT_DELETE,e=>{console.log(`🗑️ SPACE: Project deleted by ${e.walletAddress}:`,e.context.entityId),t.emit("project-deleted",e)}),o.on(a.SPACE_BUCKET_CREATE,e=>{console.log(`📦 SPACE: Bucket created by ${e.walletAddress}:`,e.context.entityId),t.emit("bucket-created",e)}),o.on(a.SPACE_BUCKET_UPDATE,e=>{console.log(`📦 SPACE: Bucket updated by ${e.walletAddress}:`,e.context.entityId),t.emit("bucket-updated",e)}),o.on(a.SPACE_BUCKET_DELETE,e=>{console.log(`🗑️ SPACE: Bucket deleted by ${e.walletAddress}:`,e.context.entityId),t.emit("bucket-deleted",e)}),o.on(a.SPACE_TASK_CREATE,e=>{console.log(`🎯 SPACE: Task created by ${e.walletAddress}:`,e.context.entityId),t.emit("task-created",e)}),o.on(a.SPACE_TASK_UPDATE,e=>{console.log(`📝 SPACE: Task updated by ${e.walletAddress}:`,e.context.entityId),t.emit("task-updated",e)}),o.on(a.SPACE_TASK_MOVE,e=>{console.log(`🔄 SPACE: Task moved by ${e.walletAddress}:`,e.context.entityId),t.emit("task-moved",e)}),o.on(a.SPACE_TASK_DELETE,e=>{console.log(`🗑️ SPACE: Task deleted by ${e.walletAddress}:`,e.context.entityId),t.emit("task-deleted",e)}),o.on(a.SPACE_MESSAGE_SEND,e=>{console.log(`💬 SPACE: Message sent by ${e.walletAddress}`),t.emit("message-sent",e)}),o.on(a.SPACE_MESSAGE_UPDATE,e=>{console.log(`✏️ SPACE: Message updated by ${e.walletAddress}`),t.emit("message-updated",e)}),o.on(a.SPACE_MESSAGE_DELETE,e=>{console.log(`🗑️ SPACE: Message deleted by ${e.walletAddress}`),t.emit("message-deleted",e)}),o.on(a.SPACE_NOTIFICATION_CREATE,e=>{console.log(`🔔 SPACE: Notification created for ${e.walletAddress}`),t.emit("notification-created",e)}),console.log("🚀 SOCKET-SPACE: Unified space listeners setup complete!"),T()},T=()=>{console.log("🍞 SPACE: Setting up unified toast notifications...");const e=s=>s?`${s.slice(0,6)}...${s.slice(-4)}`:"Unknown";t.on("project-created",s=>{r.message(`✨ ${e(s.walletAddress)} created project "${s.payload.data?.name}"`)}),t.on("project-updated",s=>{const n=s.payload.changes?Object.keys(s.payload.changes).join(", "):"unknown";r.message(`📝 ${e(s.walletAddress)} updated project "${s.payload.data?.name}" (${n})`)}),t.on("project-deleted",s=>{r.message(`🗑️ ${e(s.walletAddress)} deleted a project`)}),t.on("bucket-created",s=>{r.message(`📦 ${e(s.walletAddress)} created bucket "${s.payload.data?.name}"`)}),t.on("bucket-updated",s=>{r.message(`📦 ${e(s.walletAddress)} updated bucket "${s.payload.data?.name}"`)}),t.on("bucket-deleted",s=>{r.message(`🗑️ ${e(s.walletAddress)} deleted a bucket`)}),t.on("task-created",s=>{console.log("🍞 UNIFIED TOAST: Task created event!",s);const n=`🎯 ${e(s.walletAddress)} created task "${s.payload.data?.title}"`;console.log("🍞 UNIFIED TOAST: Showing message:",n),r.message(n)}),t.on("task-updated",s=>{const n=s.payload.changes?Object.keys(s.payload.changes).join(", "):"unknown";r.message(`📝 ${e(s.walletAddress)} updated "${s.payload.data?.title}" (${n})`)}),t.on("task-moved",s=>{r.message(`🔄 ${e(s.walletAddress)} moved "${s.payload.data?.title}" to new bucket`)}),t.on("task-deleted",s=>{console.log("🍞 UNIFIED TOAST: Task deleted event!",s),r.message(`🗑️ ${e(s.walletAddress)} deleted a task`)}),console.log("🍞 SPACE: Unified toast notifications enabled!")},C=async e=>{if(!o.connected)return console.warn("🚫 Cannot join space - socket not connected"),!1;if(u.value.has(e))return console.log(`🎯 Already joined space: ${e}`),!0;try{return o.emit(a.SPACE_JOINED,{spaceId:e}),u.value.add(e),d.value.has(e)||d.value.set(e,new Map),c.value.has(e)||c.value.set(e,[]),l.value.has(e)||l.value.set(e,new Map),console.log(`🎯 Joined space: ${e}`),!0}catch(s){return console.error("Error joining space:",s),!1}},f=async e=>{if(o.connected)try{o.emit(a.SPACE_LEFT,{spaceId:e}),u.value.delete(e),d.value.delete(e),c.value.delete(e),l.value.delete(e),console.log(`👋 Left space: ${e}`)}catch(s){console.error("Error leaving space:",s)}},$=async()=>{if(!o.connected){console.warn("🚫 Cannot auto-join projects - socket not connected");return}try{console.log("🎯 SPACE: Auto-joining user projects...");const s=(await L.get("/api/projects")).data?.projects;if(!s){console.warn("⚠️ No projects data in response");return}const n=Array.isArray(s.owned)?s.owned:[],i=Array.isArray(s.collaborated)?s.collaborated:[],p=[...n,...i];console.log(`📋 SPACE: Found ${p.length} total projects to join as spaces`);for(const A of p)await C(`project:${A.id}`),console.log(`✅ SPACE: Auto-joined project space: ${A.name} (project:${A.id})`),await new Promise(h=>setTimeout(h,100));console.log(`🎉 SPACE: Successfully auto-joined ${p.length} project spaces with unified toasts!`)}catch(e){console.error("❌ Failed to auto-join user projects:",e),r.error("Failed to connect to project updates")}},_=()=>{if(o.socket){for(const e of Object.values(N))for(const s of e)s.startsWith("space:")&&o.off(s);console.log("🧹 SPACE: Removed all unified space event listeners")}},b=async()=>{if(!o.connected)return;const e=Array.from(u.value);console.log(`🚪 SPACE: Leaving ${e.length} spaces`);for(const s of e)await f(s);u.value.clear(),d.value.clear(),c.value.clear(),l.value.clear()},I=(e,s,n)=>{!o.connected||!u.value.has(e)||o.emit(a.SPACE_CURSOR_MOVE,{spaceId:e,x:s,y:n,timestamp:Date.now()})},D=()=>{console.log("🧹 SPACE: Starting cleanup routines")},v=()=>{console.log("🧹 SPACE: Stopping cleanup routines")};return R(async()=>{console.log("🧹 SPACE: Store unmounting - cleaning up"),await b(),_()}),{joinedSpaces:S(u),spaceParticipants:S(c),spaceCursors:S(d),spaceDrags:S(l),getSpaceParticipants:P,getSpaceCursors:w,getSpaceDrags:y,isTaskBeingDragged:k,setupSpaceListeners:j,joinSpace:C,leaveSpace:f,autoJoinUserProjects:$,sendCursorMove:I,startCleanup:D,stopCleanup:v,on:t.on.bind(t),off:t.off.bind(t),emit:t.emit.bind(t)}});export{F as useSocketSpace};
//# sourceMappingURL=socket-space-NmOwQbNV.js.map

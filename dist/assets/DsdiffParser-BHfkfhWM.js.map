{"version":3,"file":"DsdiffParser-BHfkfhWM.js","sources":["../../node_modules/music-metadata/lib/dsdiff/DsdiffToken.js","../../node_modules/music-metadata/lib/dsdiff/DsdiffParser.js"],"sourcesContent":["import * as Token from 'token-types';\nimport { FourCcToken } from '../common/FourCC.js';\n/**\n * DSDIFF chunk header\n * The data-size encoding is deviating from EA-IFF 85\n * Ref: http://www.sonicstudio.com/pdf/dsd/DSDIFF_1.5_Spec.pdf\n */\nexport const ChunkHeader64 = {\n    len: 12,\n    get: (buf, off) => {\n        return {\n            // Group-ID\n            chunkID: FourCcToken.get(buf, off),\n            // Size\n            chunkSize: Token.INT64_BE.get(buf, off + 4)\n        };\n    }\n};\n//# sourceMappingURL=DsdiffToken.js.map","import * as Token from 'token-types';\nimport initDebug from 'debug';\nimport * as strtok3 from 'strtok3';\nimport { FourCcToken } from '../common/FourCC.js';\nimport { BasicParser } from '../common/BasicParser.js';\nimport { ID3v2Parser } from '../id3v2/ID3v2Parser.js';\nimport { ChunkHeader64 } from './DsdiffToken.js';\nimport { makeUnexpectedFileContentError } from '../ParseError.js';\nconst debug = initDebug('music-metadata:parser:aiff');\nexport class DsdiffContentParseError extends makeUnexpectedFileContentError('DSDIFF') {\n}\n/**\n * DSDIFF - Direct Stream Digital Interchange File Format (Phillips)\n *\n * Ref:\n * - http://www.sonicstudio.com/pdf/dsd/DSDIFF_1.5_Spec.pdf\n */\nexport class DsdiffParser extends BasicParser {\n    async parse() {\n        const header = await this.tokenizer.readToken(ChunkHeader64);\n        if (header.chunkID !== 'FRM8')\n            throw new DsdiffContentParseError('Unexpected chunk-ID');\n        this.metadata.setAudioOnly();\n        const type = (await this.tokenizer.readToken(FourCcToken)).trim();\n        switch (type) {\n            case 'DSD':\n                this.metadata.setFormat('container', `DSDIFF/${type}`);\n                this.metadata.setFormat('lossless', true);\n                return this.readFmt8Chunks(header.chunkSize - BigInt(FourCcToken.len));\n            default:\n                throw new DsdiffContentParseError(`Unsupported DSDIFF type: ${type}`);\n        }\n    }\n    async readFmt8Chunks(remainingSize) {\n        while (remainingSize >= ChunkHeader64.len) {\n            const chunkHeader = await this.tokenizer.readToken(ChunkHeader64);\n            //  If the data is an odd number of bytes in length, a pad byte must be added at the end\n            debug(`Chunk id=${chunkHeader.chunkID}`);\n            await this.readData(chunkHeader);\n            remainingSize -= (BigInt(ChunkHeader64.len) + chunkHeader.chunkSize);\n        }\n    }\n    async readData(header) {\n        debug(`Reading data of chunk[ID=${header.chunkID}, size=${header.chunkSize}]`);\n        const p0 = this.tokenizer.position;\n        switch (header.chunkID.trim()) {\n            case 'FVER': { // 3.1 FORMAT VERSION CHUNK\n                const version = await this.tokenizer.readToken(Token.UINT32_LE);\n                debug(`DSDIFF version=${version}`);\n                break;\n            }\n            case 'PROP': { // 3.2 PROPERTY CHUNK\n                const propType = await this.tokenizer.readToken(FourCcToken);\n                if (propType !== 'SND ')\n                    throw new DsdiffContentParseError('Unexpected PROP-chunk ID');\n                await this.handleSoundPropertyChunks(header.chunkSize - BigInt(FourCcToken.len));\n                break;\n            }\n            case 'ID3': { // Unofficial ID3 tag support\n                const id3_data = await this.tokenizer.readToken(new Token.Uint8ArrayType(Number(header.chunkSize)));\n                const rst = strtok3.fromBuffer(id3_data);\n                await new ID3v2Parser().parse(this.metadata, rst, this.options);\n                break;\n            }\n            case 'DSD':\n                if (this.metadata.format.numberOfChannels) {\n                    this.metadata.setFormat('numberOfSamples', Number(header.chunkSize * BigInt(8) / BigInt(this.metadata.format.numberOfChannels)));\n                }\n                if (this.metadata.format.numberOfSamples && this.metadata.format.sampleRate) {\n                    this.metadata.setFormat('duration', this.metadata.format.numberOfSamples / this.metadata.format.sampleRate);\n                }\n                break;\n            default:\n                debug(`Ignore chunk[ID=${header.chunkID}, size=${header.chunkSize}]`);\n                break;\n        }\n        const remaining = header.chunkSize - BigInt(this.tokenizer.position - p0);\n        if (remaining > 0) {\n            debug(`After Parsing chunk, remaining ${remaining} bytes`);\n            await this.tokenizer.ignore(Number(remaining));\n        }\n    }\n    async handleSoundPropertyChunks(remainingSize) {\n        debug(`Parsing sound-property-chunks, remainingSize=${remainingSize}`);\n        while (remainingSize > 0) {\n            const sndPropHeader = await this.tokenizer.readToken(ChunkHeader64);\n            debug(`Sound-property-chunk[ID=${sndPropHeader.chunkID}, size=${sndPropHeader.chunkSize}]`);\n            const p0 = this.tokenizer.position;\n            switch (sndPropHeader.chunkID.trim()) {\n                case 'FS': { // 3.2.1 Sample Rate Chunk\n                    const sampleRate = await this.tokenizer.readToken(Token.UINT32_BE);\n                    this.metadata.setFormat('sampleRate', sampleRate);\n                    break;\n                }\n                case 'CHNL': { // 3.2.2 Channels Chunk\n                    const numChannels = await this.tokenizer.readToken(Token.UINT16_BE);\n                    this.metadata.setFormat('numberOfChannels', numChannels);\n                    await this.handleChannelChunks(sndPropHeader.chunkSize - BigInt(Token.UINT16_BE.len));\n                    break;\n                }\n                case 'CMPR': { // 3.2.3 Compression Type Chunk\n                    const compressionIdCode = (await this.tokenizer.readToken(FourCcToken)).trim();\n                    const count = await this.tokenizer.readToken(Token.UINT8);\n                    const compressionName = await this.tokenizer.readToken(new Token.StringType(count, 'ascii'));\n                    if (compressionIdCode === 'DSD') {\n                        this.metadata.setFormat('lossless', true);\n                        this.metadata.setFormat('bitsPerSample', 1);\n                    }\n                    this.metadata.setFormat('codec', `${compressionIdCode} (${compressionName})`);\n                    break;\n                }\n                case 'ABSS': { // 3.2.4 Absolute Start Time Chunk\n                    const hours = await this.tokenizer.readToken(Token.UINT16_BE);\n                    const minutes = await this.tokenizer.readToken(Token.UINT8);\n                    const seconds = await this.tokenizer.readToken(Token.UINT8);\n                    const samples = await this.tokenizer.readToken(Token.UINT32_BE);\n                    debug(`ABSS ${hours}:${minutes}:${seconds}.${samples}`);\n                    break;\n                }\n                case 'LSCO': { // 3.2.5 Loudspeaker Configuration Chunk\n                    const lsConfig = await this.tokenizer.readToken(Token.UINT16_BE);\n                    debug(`LSCO lsConfig=${lsConfig}`);\n                    break;\n                }\n                default:\n                    debug(`Unknown sound-property-chunk[ID=${sndPropHeader.chunkID}, size=${sndPropHeader.chunkSize}]`);\n                    await this.tokenizer.ignore(Number(sndPropHeader.chunkSize));\n            }\n            const remaining = sndPropHeader.chunkSize - BigInt(this.tokenizer.position - p0);\n            if (remaining > 0) {\n                debug(`After Parsing sound-property-chunk ${sndPropHeader.chunkSize}, remaining ${remaining} bytes`);\n                await this.tokenizer.ignore(Number(remaining));\n            }\n            remainingSize -= BigInt(ChunkHeader64.len) + sndPropHeader.chunkSize;\n            debug(`Parsing sound-property-chunks, remainingSize=${remainingSize}`);\n        }\n        if (this.metadata.format.lossless && this.metadata.format.sampleRate && this.metadata.format.numberOfChannels && this.metadata.format.bitsPerSample) {\n            const bitrate = this.metadata.format.sampleRate * this.metadata.format.numberOfChannels * this.metadata.format.bitsPerSample;\n            this.metadata.setFormat('bitrate', bitrate);\n        }\n    }\n    async handleChannelChunks(remainingSize) {\n        debug(`Parsing channel-chunks, remainingSize=${remainingSize}`);\n        const channels = [];\n        while (remainingSize >= FourCcToken.len) {\n            const channelId = await this.tokenizer.readToken(FourCcToken);\n            debug(`Channel[ID=${channelId}]`);\n            channels.push(channelId);\n            remainingSize -= BigInt(FourCcToken.len);\n        }\n        debug(`Channels: ${channels.join(', ')}`);\n        return channels;\n    }\n}\n//# sourceMappingURL=DsdiffParser.js.map"],"names":["ChunkHeader64","buf","off","FourCcToken","Token.INT64_BE","debug","initDebug","DsdiffContentParseError","makeUnexpectedFileContentError","DsdiffParser","BasicParser","header","type","remainingSize","chunkHeader","p0","version","Token.UINT32_LE","id3_data","Token.Uint8ArrayType","rst","strtok3.fromBuffer","ID3v2Parser","remaining","sndPropHeader","sampleRate","Token.UINT32_BE","numChannels","Token.UINT16_BE","compressionIdCode","count","Token.UINT8","compressionName","Token.StringType","hours","minutes","seconds","samples","lsConfig","bitrate","channels","channelId"],"mappings":"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","x_google_ignoreList":[0,1]}